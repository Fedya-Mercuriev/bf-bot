/* eslint-disable class-methods-use-this */
/* eslint-disable indent */
/* eslint-disable no-underscore-dangle */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const order = require('./../order/order');
const Contacts = require('../main-page/contacts');

class Base {
    // –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã
    constructor() {
        this._botSentMessages = [];
        this._saveDataMsg = [];
        this._statusMessages = [];
    }

    get messages() {
        return this.messagesStorage;
    }

    // –°–µ—Ç—Ç–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º,
    // –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ id –∏ –∫–ª–∞–¥–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    set messages(options) {
        const { messageType, messageObj } = options;
        if (messageObj !== 'clear') {
            const { message_id: id } = messageObj;
            this.messagesStorage[messageType].push(id);
            console.log(`–î–æ–±–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤: ${messageType}`);
        } else {
            if (messageType === 'all') {
                const messagesStorage = Object.keys(this.messagesStorage);
                messagesStorage.forEach((messageStorage) => {
                    messagesStorage[messageStorage].length = 0;
                });
                console.log('–û—á–∏—Å—Ç–∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π');
            }
            this.messagesStorage[messageType].length = 0;
            console.log(`–£–¥–∞–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑: ${messageType}`);
        }
    }

    invokeFunction(passedArgs, ctx) {
        if (passedArgs.indexOf(':') !== -1) {
            // –í –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ –¥–æ–ª–∂–Ω–æ –ª–µ–∂–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞
            const args = passedArgs.split(':');
            const funcName = args.splice(0, 1);
            return this[funcName](ctx, ...args);
        }
        const funcName = passedArgs;
        return this[funcName](ctx);
    }

    removeMessagesOfSpecificType(ctx, propName) {
        this.messagesStorage[propName].forEach((id) => {
            try {
                ctx.deleteMessage(id);
            } catch (e) {
                console.log(e.message);
            }
        });
        this.messages = {
            messageType: propName,
            messageObj: 'clear',
        };
    }

    _saveAndExit(ctx, optionsArrName) {
        // @keyToAssignData ‚Äì –∫–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤ orderInfo –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        // @keyToAccessData ‚Äì –∫–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ orderInfo
        // @notificationMsg ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –æ–∫–Ω–µ –¥—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        // @sceneName ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const {
            keyToAssignData,
            keyToAccessData,
            notificationMsg,
            sceneName,
        } = this[optionsArrName];
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, `‚è≥ ${notificationMsg}`);
        order.orderInfo = [keyToAssignData, this[keyToAccessData]];
        this.returnToMenu(ctx, sceneName);
    }

    _overwriteData(ctx, funcName) {
        // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–µ –≤–≤–æ–¥ –¥–∞—Ç—ã
        // @funcName - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω
        this.cleanScene(ctx);
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚è≥ –ú–∏–Ω—É—Ç–æ—á–∫—É');
        this[funcName](ctx);
    }

    _leaveData(ctx) {
        // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è –º–µ–Ω—é –∑–∞–∫–∞–∑–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é callback-–∫–Ω–æ–ø–∫—É)
        // @sceneName ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –∑–∞–∫–∞–∑–∞');
        this.returnToMenu(ctx, this.leaveDataInfo);
    }

    cleanScene(ctx) {
        const messagesBoxes = Object.keys(this.messagesStorage);
        ctx.scene.msgToDelete = [];
        // –°–∫–ª–µ–∏–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        messagesBoxes.forEach((messageStorage) => {
            if (this.messagesStorage[messageStorage].length !== 0) {
                ctx.scene.msgToDelete = ctx.scene.msgToDelete.concat(this.messagesStorage[messageStorage]);
                // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ - –æ—á–∏—Å—Ç–∏–º –µ–≥–æ
                this.messages = {
                    messageType: messageStorage,
                    messageObj: 'clear',
                };
            }
        });
        ctx.scene.msgToDelete.forEach((id) => {
            try {
                ctx.deleteMessage(id);
            } catch (error) {
                console.log(error);
            }
        });
    }

    async _requestContinue(ctx, additionalMsg, propNameToAccessParameters, customButtonsSet) {
        // customButtonsSet ‚Äì –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏/–æ–±—ä–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –æ—Å—Ç–∞–µ—Ç—Å—è)
        const buttonsArr = [
            Markup.callbackButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `_saveAndExit:${propNameToAccessParameters}`),
        ];
        if (customButtonsSet) {
            // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –ø–µ—Ä–µ–ø–∏—à–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É —Ç–∞–º,
            // —á—Ç–æ–± –¥–∞–ª–µ–µ –∫–Ω–æ–ø–∫–∏ —à–ª–∏ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º
            buttonsArr[0] = [Markup.callbackButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `_saveAndExit:${propNameToAccessParameters}`)];
            // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç
            if (!customButtonsSet.length) {
                const { text, functionName } = customButtonsSet;
                buttonsArr.push([
                    Markup.callbackButton(text, `${functionName}`),
                ]);
                // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤
            } else {
                customButtonsSet.forEach((button) => {
                    const { text, functionName } = button;
                    buttonsArr.push([
                        Markup.callbackButton(text, `${functionName}`),
                    ]);
                });
            }
        }
        const message = await ctx.reply(`–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑ –±—É–∫–µ—Ç–∞ –∏–ª–∏ ${additionalMsg}`,
            Markup.inlineKeyboard(buttonsArr).extra({
                disable_notification: true,
            }));
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
    }

    returnToMenu(ctx, sceneName) {
        try {
            ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –∑–∞–∫–∞–∑–∞');
        } catch (e) {
            console.log(e.message);
        }
        this.cleanScene(ctx);
        ctx.scene.leave(sceneName);
        ctx.scene.enter('orderScene');
    }

    async displayPhoneNumber(ctx) {
        const message = await Contacts.showPhoneNumber(ctx);
        this.messages = {
            messageType: 'other',
            messageObj: message,
        };
    }

    async confirmCancelOrder(ctx) {
        const returnedMessage = await ctx.replyWithHTML('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ <b>–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã</b> –∏ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω—Ü—É! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
            Markup.inlineKeyboard([
                [Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'cancelOrder:null')],
                [Markup.callbackButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑', 'continueOrder:null')],
            ]).extra());
        this.messages = {
            messageType: 'other',
            messageObj: returnedMessage,
        };
    }

    continueOrder(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–∫–∞–∑!');
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
    }

    async cancelOrder(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üòî –ù–∞–¥–µ—é—Å—å, –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ');
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        const returnedMessage = await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!');
        this.messages = {
            messageType: 'other',
            messageObj: returnedMessage,
        };
        // –°–±—Ä–æ—Å–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        for (let prop in order.orderInfo) {
            order.orderInfo = [prop, undefined];
        }
        ctx.scene.leave(ctx.scene.current.id);
    }
}

module.exports = Base;