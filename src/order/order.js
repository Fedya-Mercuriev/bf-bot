/* eslint-disable no-restricted-syntax */
/* eslint-disable no-prototype-builtins */
/* eslint-disable no-underscore-dangle */
/* eslint-disable class-methods-use-this */
/* eslint-disable indent */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const Invoice = require('./invoice');
class Order {
    constructor() {
        this.orderIsInitialised = false;
        this.info = {
            contactInfo: undefined,
            orderDate: undefined,
            orderTime: undefined,
            bouquet: undefined,
            shipping: undefined,
        };
        this.messagesStorage = {
            intro: [],
            confirmation: [],
            other: [],
        };
        this.welcomeMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–∫—Ç–∞ –º–µ–Ω—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å ‚úÖ';
        // –ò–Ω–≤–æ–π—Å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ
        this.invoice = null;
        this.buttons = {
            orderDate: {
                emoji: 'üìÖ',
                text: '–î–∞—Ç–∞',
                callback_data: 'dateValidation',
                // –†–∞–Ω—å—à–µ –±—ã–ª–æ this.orderInfo.orderDate
                data: this.info.orderDate
            },
            shipping: {
                emoji: 'üõµ',
                text: '–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞',
                callback_data: 'shippingValidation',
                data: this.info.shipping
            },
            orderTime: {
                emoji: '‚è±',
                text: '–í—Ä–µ–º—è',
                callback_data: 'timeValidation',
                data: this.info.orderTime
            },
            bouquet: {
                emoji: 'üíê',
                text: '–í—ã–±–æ—Ä –±—É–∫–µ—Ç–∞',
                callback_data: 'bouqtypeValidation',
                data: this.info.bouquet
            },
            contactInfo: {
                emoji: 'üì≤',
                text: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                callback_data: 'contactInfoValidation',
                data: this.info.contactInfo
            },
        };
    }

    get messages() {
        return this.messagesStorage;
    }

    // –°–µ—Ç—Ç–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º,
    // –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ id –∏ –∫–ª–∞–¥–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    set messages(options) {
        const { messageType, messageObj } = options;
        if (messageObj !== 'clear') {
            const { message_id: id } = messageObj;
            this.messagesStorage[messageType].push(id);
            console.log(`–î–æ–±–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤: ${messageType}`);
        } else {
            if (messageType === 'all') {
                const messagesStorage = Object.keys(this.messagesStorage);
                messagesStorage.forEach((messageStorage) => {
                    messagesStorage[messageStorage].length = 0;
                });
                console.log('–û—á–∏—Å—Ç–∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π');
            }
            this.messagesStorage[messageType].length = 0;
            console.log(`–£–¥–∞–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑: ${messageType}`);
        }
    }

    get orderInfo() {
        return this.info;
    }

    set orderInfo(settings) {
        const [prop, val] = settings;
        this.info[prop] = val;
    }

    russifyDate(date) {
        // –ü–æ–ª—É—á–∞–µ—Ç date –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
        const usedDate = new Date(date);
        return `${usedDate.getDate()} ${months[usedDate.getMonth()]} ${usedDate.getFullYear()} –≥–æ–¥–∞`;
    }

    convertTimeToReadableForm(time) {
        let minutes = new Date(time).getMinutes().toString();
        if (minutes.length === 1) {
            minutes = `0${minutes}`;
        }
        return `${new Date(time).getHours()}:${minutes}`;
    }

    removeMessagesOfSpecificType(ctx, propName) {
        this.messagesStorage[propName].forEach((id) => {
            try {
                ctx.deleteMessage(id);
            } catch (e) {
                console.log(e.message);
            }
        });
        this.messages = {
            messageType: propName,
            messageObj: 'clear',
        };
    }

    cleanScene(ctx) {
        const messagesBoxes = Object.keys(this.messagesStorage);
        ctx.scene.msgToDelete = [];
        // –°–∫–ª–µ–∏–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        messagesBoxes.forEach((messageStorage) => {
            if (this.messagesStorage[messageStorage].length !== 0) {
                ctx.scene.msgToDelete = ctx.scene.msgToDelete.concat(this.messagesStorage[messageStorage]);
                // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ - –æ—á–∏—Å—Ç–∏–º –µ–≥–æ
                this.messages = {
                    messageType: messageStorage,
                    messageObj: 'clear',
                };
            }
        });
        ctx.scene.msgToDelete.forEach((id) => {
            try {
                ctx.deleteMessage(id);
            } catch (error) {
                console.log(error);
            }
        });
    }

    async launch(ctx) {
        this.displayInterface(ctx, this.welcomeMsg);
    }

    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ–Ω—é
    makeInterface() {
        const buttonsArr = [];
        for (const prop in this.buttons) {
            if (this.buttons.hasOwnProperty(prop)) {
                const result = [];
                if (this.info[prop] !== undefined) {
                    result.push(Markup.callbackButton(`‚úÖ ${this.buttons[prop].text}`, `${this.buttons[prop].callback_data}`));
                    buttonsArr.push(result);
                } else {
                    result.push(Markup.callbackButton(`${this.buttons[prop].emoji} ${this.buttons[prop].text}`,
                        `${this.buttons[prop].callback_data}`));
                    buttonsArr.push(result);
                }
            }
        }
        return Markup.inlineKeyboard(buttonsArr).extra();
    }

    async displayInterface(ctx) {
        const msg = '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–∫—Ç–∞ –º–µ–Ω—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å ‚úÖ';
        let returnedMessage = await ctx.reply('–í—ã –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞',
            Markup.keyboard([
                ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
            ])
            .oneTime()
            .resize()
            .extra());
        this.messages = {
            messageType: 'intro',
            messageObj: returnedMessage,
        };
        returnedMessage = await ctx.reply(msg, this.makeInterface());
        this.messages = {
            messageType: 'other',
            messageObj: returnedMessage,
        };
    }

    openValidationOperation(ctx, operationName) {
        if (operationName.indexOf(':') !== -1) {
            const [operation, passedArgs] = operationName.split(':');
            // this[operation](ctx, functionToinvoke);
            this.invokeFunction(`${operation}:${passedArgs}`, ctx);
        } else {
            const baseSceneName = ctx.scene.current.id;
            try {
                ctx.scene.leave(baseSceneName);
                ctx.scene.enter(operationName);
            } catch (e) {
                console.log(e.message);
                ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚õî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!');
            }
        }
    }

    invokeFunction(passedArgs, ctx) {
        if (passedArgs.indexOf(':') !== -1) {
            // –í –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ –¥–æ–ª–∂–Ω–æ –ª–µ–∂–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞
            const args = passedArgs.split(':');
            const funcName = args.splice(0, 1);
            return this[funcName](ctx, ...args);
        }
        const funcName = passedArgs;
        return this[funcName](ctx);
    }

    async displayFinalOrderInfo(ctx) {
        const { orderDate, orderTime, shipping, bouquet, contactInfo } = this.orderInfo;
        const { photo, name, price } = bouquet;
        // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∞—Ç—É
        const finalDate = this.russifyDate(orderDate);
        // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—Ä–µ–º—è
        const finalTime = this.convertTimeToReadableForm(orderTime);
        // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        const shippingInfo = (shipping === false) ? '—Å–∞–º–æ–≤—ã–≤–æ–∑' : shipping;
        // –°–æ–±–µ—Ä–µ–º –≤—Å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const bouquetCaption = `<b>–î–∞—Ç–∞:</b> ${finalDate};\n<b>–í—Ä–µ–º—è:</b> ${finalTime};\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${shippingInfo};\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> ${contactInfo};\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:</b> ${name};\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${price};`;
        let returnedMessage = await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!');
        this.messages = {
            messageType: 'confirmation',
            messageObj: returnedMessage,
        };
        returnedMessage = await ctx.telegram.sendPhoto(ctx.chat.id, photo, {
            caption: bouquetCaption,
            parse_mode: 'HTML',
            reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton('‚úÖ –î–∞, –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', 'showInvoice:null')],
                [Markup.callbackButton('‚úèÔ∏è –ú–Ω–µ –Ω—É–∂–Ω–æ –∫–æ–µ-—á—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å!', 'continueOrder:null')],
            ]),
        });
        this.messages = {
            messageType: 'confirmation',
            messageObj: returnedMessage,
        };
    }

    async confirmCancelOrder(ctx) {
        const returnedMessage = await ctx.replyWithHTML('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ <b>–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã</b> –∏ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω—Ü—É! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
            Markup.inlineKeyboard([
                [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'cancelOrder:null')],
                [Markup.callbackButton('üîù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑', 'continueOrder:null')],
            ]).extra());
        this.messages = {
            messageType: 'confirmation',
            messageObj: returnedMessage,
        };
    }

    continueOrder(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–∫–∞–∑!');
        // ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        this.removeMessagesOfSpecificType(ctx, 'confirmation');
    }

    async cancelOrder(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üòî –ù–∞–¥–µ—é—Å—å –Ω–∞ –≤–∞—à–µ —Å–∫–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ');
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        const returnedMessage = await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!');
        this.messages = {
            messageType: 'other',
            messageObj: returnedMessage,
        };
        // –°–±—Ä–æ—Å–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        for (const prop in this.orderInfo) {
            if (this.orderInfo[prop] !== undefined) {
                this.orderInfo = [prop, undefined];
            }
        }
        ctx.scene.leave(ctx.scene.current.id);
    }
}

const order = new Order();

module.exports = order;