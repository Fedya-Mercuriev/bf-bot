/* eslint-disable no-restricted-syntax */
/* eslint-disable no-prototype-builtins */
/* eslint-disable no-underscore-dangle */
/* eslint-disable class-methods-use-this */
/* eslint-disable indent */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const Invoice = require('./invoice');
const Base = require('./base-class');
const orderInfo = require('./order-info');
const { ValidateDate } = require('./../order/validate/validate-date/date');
const { Time } = require('./../order/validate/validate-time/time');

class Order extends Base {
    constructor() {
        super();
        this.orderIsInitialised = false;
        this.orderConfirmationIsDisplayed = false;
        this.messagesStorage = {
            intro: [],
            confirmation: [],
            other: [],
        };
        this.welcomeMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–∫—Ç–∞ –º–µ–Ω—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å ‚úÖ';
        this.buttons = {
            orderDate: {
                emoji: 'üìÖ',
                text: '–î–∞—Ç–∞',
                callback_data: 'dateValidation',
            },
            shipping: {
                emoji: 'üõµ',
                text: '–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞',
                callback_data: 'shippingValidation',
            },
            orderTime: {
                emoji: '‚è±',
                text: '–í—Ä–µ–º—è',
                callback_data: 'timeValidation',
            },
            bouquet: {
                emoji: 'üíê',
                text: '–í—ã–±–æ—Ä –±—É–∫–µ—Ç–∞',
                callback_data: 'bouqtypeValidation',
            },
            contactInfo: {
                emoji: 'üì≤',
                text: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                callback_data: 'contactInfoValidation',
            },
        };
    }

    async launch(ctx) {
        this.displayInterface(ctx, this.welcomeMsg);
    }

    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ–Ω—é
    makeInterface() {
        const buttonsArr = [];
        for (const prop in this.buttons) {
            if (this.buttons.hasOwnProperty(prop)) {
                const result = [];
                if (orderInfo.orderInfo[prop] !== undefined) {
                    result.push(Markup.callbackButton(`‚úÖ ${this.buttons[prop].text}`, `${this.buttons[prop].callback_data}`));
                    buttonsArr.push(result);
                } else {
                    result.push(Markup.callbackButton(`${this.buttons[prop].emoji} ${this.buttons[prop].text}`,
                        `${this.buttons[prop].callback_data}`));
                    buttonsArr.push(result);
                }
            }
        }
        return Markup.inlineKeyboard(buttonsArr).extra();
    }

    async displayInterface(ctx) {
        const msg = '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–∫—Ç–∞ –º–µ–Ω—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å ‚úÖ';
        let returnedMessage = await ctx.reply('–í—ã –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞',
            Markup.keyboard([
                ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
            ])
            .oneTime()
            .resize()
            .extra());
        this.messages = {
            messageType: 'intro',
            messageObj: returnedMessage,
        };
        returnedMessage = await ctx.reply(msg, this.makeInterface());
        this.messages = {
            messageType: 'other',
            messageObj: returnedMessage,
        };
    }

    openValidationOperation(ctx, operationName) {
        if (operationName.indexOf(':') !== -1) {
            const [operation, passedArgs] = operationName.split(':');
            // this[operation](ctx, functionToinvoke);
            this.invokeFunction(`${operation}:${passedArgs}`, ctx);
        } else {
            const baseSceneName = ctx.scene.current.id;
            try {
                ctx.scene.leave(baseSceneName);
                ctx.scene.enter(operationName);
            } catch (e) {
                console.log(e.message);
                ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚õî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!');
            }
        }
    }

    async displayFinalOrderInfo(ctx, comment = undefined) {
        const { orderDate, orderTime, shipping, bouquet, contactInfo } = orderInfo.orderInfo;
        const { photo, name, price } = bouquet;
        // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∞—Ç—É
        const finalDate = ValidateDate.russifyDate(orderDate);
        // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—Ä–µ–º—è
        const finalTime = Time.convertTimeToReadableForm(orderTime);
        // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        const shippingInfo = (shipping === false) ? '—Å–∞–º–æ–≤—ã–≤–æ–∑' : shipping;
        // –°–æ–±–µ—Ä–µ–º –≤—Å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        let bouquetCaption;
        if (comment) {
            bouquetCaption = `<b>–î–∞—Ç–∞:</b> ${finalDate};\n<b>–í—Ä–µ–º—è:</b> ${finalTime};\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${shippingInfo};\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> ${contactInfo};\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:</b> ${name};\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${price};<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment}`;
        } else {
            bouquetCaption = `<b>–î–∞—Ç–∞:</b> ${finalDate};\n<b>–í—Ä–µ–º—è:</b> ${finalTime};\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${shippingInfo};\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> ${contactInfo};\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:</b> ${name};\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${price};`;
        }
        let returnedMessage = await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!');
        this.messages = {
            messageType: 'confirmation',
            messageObj: returnedMessage,
        };
        returnedMessage = await ctx.telegram.sendPhoto(ctx.chat.id, photo, {
            caption: bouquetCaption,
            parse_mode: 'HTML',
            reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton('‚úÖ –î–∞, –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', 'showInvoice:null')],
                [Markup.callbackButton('‚úèÔ∏è –ú–Ω–µ –Ω—É–∂–Ω–æ –∫–æ–µ-—á—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å!', 'continueOrder:null')],
            ]),
        });
        this.messages = {
            messageType: 'confirmation',
            messageObj: returnedMessage,
        };
    }

    // async confirmCancelOrder(ctx) {
    //     const returnedMessage = await ctx.replyWithHTML('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ <b>–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã</b> –∏ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω—Ü—É! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
    //         Markup.inlineKeyboard([
    //             [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'cancelOrder:true')],
    //             [Markup.callbackButton('üîù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑', 'continueOrder:null')],
    //         ]).extra());
    //     this.messages = {
    //         messageType: 'confirmation',
    //         messageObj: returnedMessage,
    //     };
    // }

    async continueOrder(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–∫–∞–∑!');
        this.removeMessagesOfSpecificType(ctx, 'confirmation');
        const returnedMessage = await ctx.reply('–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.');
        this.messages = {
            messageType: 'other',
            messageObj: returnedMessage,
        };
    }

    async cancelOrder(ctx, cancelConfirmed = false) {
        if (!cancelConfirmed) {
            // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
            const returnedMessage = await ctx.replyWithHTML('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ <b>–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã</b> –∏ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω—Ü—É! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                Markup.inlineKeyboard([
                    [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'cancelOrder:true')],
                    [Markup.callbackButton('üîù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑', 'continueOrder:null')],
                ]).extra());
            this.messages = {
                messageType: 'confirmation',
                messageObj: returnedMessage,
            };
        } else {
            // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ –ø–æ–¥—Å—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üòî –ù–∞–¥–µ—é—Å—å –Ω–∞ –≤–∞—à–µ —Å–∫–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ');
            ctx.deleteMessage(ctx.update.callback_query.message.message_id);
            const returnedMessage = await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!');
            this.messages = {
                messageType: 'other',
                messageObj: returnedMessage,
            };
            // –°–±—Ä–æ—Å–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
            for (const prop in orderInfo.orderInfo) {
                if (orderInfo.orderInfo[prop] !== undefined) {
                    orderInfo.orderInfo = [prop, undefined];
                }
            }
            ctx.scene.leave(ctx.scene.current.id);
        }
    }
}

const order = new Order();

module.exports = order;