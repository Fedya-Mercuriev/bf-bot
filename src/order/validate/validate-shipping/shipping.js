/* eslint-disable no-underscore-dangle */
/* eslint-disable indent */
/* eslint-disable import/newline-after-import */
/* eslint-disable class-methods-use-this */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const Base = require('./../../base-class');
const processPickUpQuery = require('./chunks/process-pickup-query');
const { sendRequest, processResponse, prepareButtons } = require('./chunks/process-shipping-info');
const citiesList = require('../../../../core');

class Shipping extends Base {
    constructor() {
        super();
        this.shippingAddress = undefined;
        // –û–ø–µ—Ä–∞—Ü–∏–∏, –ª–µ–∂–∞—â–∏–µ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
        this._processPickUpQuery = processPickUpQuery;
        this._sendRequest = sendRequest;
        this._processResponse = processResponse;
        this._prepareButtons = prepareButtons;
        // –ü—Ä–æ—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        this.city = null;
        // –û—Ç –∑–Ω–∞–µ—á–Ω–∏—è —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏—Ç –±—É–¥–µ—Ç –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º
        // –∏–ª–∏ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞, —Ç—Ä–µ–±—É—é—â–∞—è —Å–ø–µ—Ä–≤–∞ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
        this.shippingInfoProcessingStarted = false;
        //  –í —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        // –ü—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞, –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
        this._tempButtonsStorage = [];
        this.messagesStorage = {
            intro: [],
            confirmation: [],
            addressButtons: [],
            statusMsg: [],
            other: [],
        };
        this.saveDataKeys = {
            keyToAssignData: 'shipping',
            keyToAccessData: 'shippingAddress',
            notificationMsg: '–°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏',
            sceneName: 'shippingValidation',
        };
        this.leaveDataInfo = 'shippingValidation';
        this.overwriteDataInfo = 'requestShippingInfo';
    }

    async requestShipping(ctx) {
        // –ï—Å–ª–∏ –≤ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ—à–ª–∏ —Å –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã - —É–¥–∞–ª–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        } catch (e) {
            console.log(e.message);
        }
        if (this.shipping !== undefined) {
            this.shipping = undefined;
        }
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–ó–∞–ø–∏—Å—ã–≤–∞—é —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏...');

        if (this.messages.confirmation.length) {
            this.removeMessagesOfSpecificType(ctx, 'confirmation');
        }
        if (this.messages.addressButtons.length !== 0) {
            this.removeMessagesOfSpecificType(ctx, 'addressButtons');
        }
        if (this.shippingInfoProcessingStarted) {
            this.shippingInfoProcessingStarted = false;
        }
        let message;
        if (this.messages.intro.length === 0) {
            message = await ctx.reply('–ö–∞–∫ –±—É–¥–µ–º –∑–∞–±–∏—Ä–∞—Ç—å –±—É–∫–µ—Ç?',
                Markup.keyboard([
                    ['üìú –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'],
                    ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                    ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
                ])
                .oneTime()
                .resize()
                .extra());
            this.messages = {
                messageType: 'intro',
                messageObj: message,
            };
        }
        message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –±—É–∫–µ—Ç üëá',
            Markup.inlineKeyboard([
                [Markup.callbackButton('üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑', '_processPickUpQuery')],
                [Markup.callbackButton('üõµ –î–æ—Å—Ç–∞–≤–∫–∞', '_requestAddress')],
            ]).extra());
        this.messages = {
            messageType: 'other',
            messageObj: message,
        };
    }

    async _requestAddress(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚úçÔ∏è –î–æ—Å—Ç–∞—é —Ä—É—á–∫—É –∏ –±–ª–æ–∫–Ω–æ—Ç...');
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        this.shippingInfoProcessingStarted = true;
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—É–ª–∏—Ü–∞, –¥–æ–º" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é',
            Markup.inlineKeyboard([
                [Markup.callbackButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', 'requestShipping')],
            ]).extra());
        this.messages = {
            messageType: 'other',
            messageObj: message,
        };
    }

    _identifyMessageType(ctx) {
        return new Promise((resolve) => {
            if (ctx.updateSubTypes.indexOf('location') !== -1) {
                resolve({
                    msgText: ctx.update.message.location,
                    msgType: 'location',
                });
            } else {
                resolve({
                    msgText: ctx.update.message.text,
                    msgType: 'text',
                });
            }
        });
    }

    displayButtons(ctx, buttonsArray) {
        buttonsArray.forEach(async(button) => {
            const { btnText, position } = button;
            ctx.reply(`üè° ${btnText}`,
                Markup.inlineKeyboard([
                    Markup.callbackButton('–≠—Ç–æ –º–æ–π –∞–¥—Ä–µ—Å', `_setShippingInfo:${position}`),
                ]).extra({
                    disable_notification: true,
                }),
            ).then((returnedMessage) => {
                this.messages = {
                    messageType: 'addressButtons',
                    messageObj: returnedMessage,
                };
                this.messages = {
                    messageType: 'other',
                    messageObj: returnedMessage,
                };
            });
        });
    }

    async validateShippingInfo(ctx, shippingCity) {
        const options = {
            json: true,
            uri: `https://geocode-maps.yandex.ru/1.x/?apikey=${process.env.MAPS_API_KEY}&format=json`,
            shippingCity,
        };
        if (!this.shippingInfoProcessingStarted) {
            const message = await ctx.reply('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ø–µ—Ä–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –±—É–∫–µ—Ç!');
            this.messages = {
                messageType: 'other',
                messageObj: message,
            };
            return;
        }
        // –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ —É–∂–µ –≤–≤–æ–¥–∏–ª—Å—è –∞–¥—Ä–µ—Å –±—ã–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äì —É–¥–∞–ª–∏–º –∏—Ö
        if (this.messages.addressButtons.length || this.messages.confirmation.length) {
            this.removeMessagesOfSpecificType(ctx, 'addressButtons');
            this.removeMessagesOfSpecificType(ctx, 'confirmation');
        }
        const message = await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...');
        this.messages = {
            messageType: 'statusMsg',
            messageObj: message,
        };
        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        this._identifyMessageType(ctx)
            // –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ API –Ø–Ω–¥–µ–∫—Å–∞
            .then(preparedMessage => this._sendRequest(preparedMessage, options))
            // –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–≤–µ—Ç (–æ—Ç—Å–µ—á–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            .then(async(response) => {
                this.removeMessagesOfSpecificType(ctx, 'statusMsg');
                return this._processResponse(response, shippingCity);
            })
            // –°–æ–±–µ—Ä–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            .then(dataArr => this._prepareButtons(dataArr))
            .then(async(buttonsArr) => {
                this._tempButtonsStorage.length = 0;
                // –ó–∞—Ä–∞–Ω–µ–µ –ø–æ–º–µ—Å—Ç–∏–º –≥–æ—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∞–¥—Ä–µ—Å–æ–º - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—é–¥–∞
                buttonsArr.forEach((button) => {
                    const { btnText } = button;
                    this._tempButtonsStorage.push(btnText);
                });
                const msg = await ctx.reply('–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.');
                this.messages = {
                    messageType: 'addressButtons',
                    messageObj: msg,
                };
                // –í—ã–≤–µ–¥–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
                this.displayButtons(ctx, buttonsArr);
            })
            // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äì –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            .catch(async(e) => {
                if (this.messages.statusMsg.length !== 0) {
                    this.removeMessagesOfSpecificType(ctx, 'statusMsg');
                }
                const msg = await ctx.reply(e.message);
                this.messages = {
                    messageType: 'other',
                    messageObj: msg,
                };
            });
    }

    async _setShippingInfo(ctx, buttonIndex) {
        if (this.messages.confirmation.length) {
            this.removeMessagesOfSpecificType(ctx, 'confirmation');
        }
        this.removeMessagesOfSpecificType(ctx, 'addressButtons');
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚è≥ –í—ã–≤–æ–∂—É –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ —ç–∫—Ä–∞–Ω...');
        this.shippingAddress = this._tempButtonsStorage[+buttonIndex];
        const message = await ctx.replyWithHTML(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –∞–¥—Ä–µ—Å—É: <b>${this.shippingAddress}</b>`);
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
        this._requestContinue(
            ctx,
            '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å',
            'saveDataKeys', {
                text: '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏',
                functionName: 'requestShipping',
            },
        );
    }

    _setShippingCity(ctx, city) {
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        this.city = city;
        this.requestShipping(ctx);
    }

    async displayCitiesList(ctx) {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
        // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥
        const cities = citiesList.map(item => [Markup.callbackButton(item, `_setShippingCity:${item}`)]);
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥', Markup.inlineKeyboard(cities).extra());
        this.messages = {
            messageType: 'other',
            messageObj: message,
        };
    }

    async confirmShippingOverwrite(ctx, shipping) {
        // –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        shipping = (shipping === false) ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : `(–î–æ—Å—Ç–∞–≤–∫–∞) ${shipping}`;
        let message = await ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: <b>${shipping}</b>`);
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
        message = await ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?',
            Markup.inlineKeyboard([
                [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', '_overwriteData:requestShipping')],
                [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', '_leaveData:shippingValidation')],
            ]).extra({
                disable_notification: true,
            }));
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
    }

    get shippingInfo() {
        return this.shipping;
    }

    get shippingCity() {
        return this.city;
    }

    set shippingCity(city) {
        this.city = city;
    }
}

const validateShipping = new Shipping();

module.exports = validateShipping;