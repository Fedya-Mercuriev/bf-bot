/* eslint-disable no-underscore-dangle */
/* eslint-disable indent */
/* eslint-disable import/newline-after-import */
/* eslint-disable class-methods-use-this */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const request = require('request-promise');
const Base = require('./../../base-class');
const { leave } = Stage;
const { order, citiesList } = require('../../../../core');

const shippingValidation = new Scene('shippingValidation');

class Shipping extends Base {
    constructor() {
        super();
        this.shipping = undefined;
        // this.requestUrlBody = `geocode-maps.yandex.ru/1.x/?apikey=${mapsApiToken}&format=json`;
        // this.requestBody = 'https://geocode-maps.yandex.ru/1.x/';
        this.requestOptions = {
            uri: `https://geocode-maps.yandex.ru/1.x/?apikey=${process.env.MAPS_API_KEY}&format=json`,
            json: true,
        };
        this.city = null;
        this.shippingInfoProcessingStarted = false;
        this.saveDataKeysArr = {
            keyToAssignData: 'shipping',
            keyToAccessData: 'shipping',
            notificationMsg: '–°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏',
            sceneName: 'shippingValidation',
        };
        this.leaveDataInfo = 'shippingValidation';
        this.overwriteDataInfo = 'requestShippingInfo';
    }

    async requestShipping(ctx) {
        this._messagesToDelete = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –±—É–∫–µ—Ç üëá',
            Markup.inlineKeyboard([
                [Markup.callbackButton('üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑', '_processPickUpQuery')],
                [Markup.callbackButton('üõµ –î–æ—Å—Ç–∞–≤–∫–∞', '_requestShippingInfo')],
            ]).extra(),
        );
    }

    async _requestShippingInfo(ctx) {
        ctx.answerCbQuery(ctx.update.callback_query.id, '‚úçÔ∏è –î–æ—Å—Ç–∞—é —Ä—É—á–∫—É –∏ –±–ª–æ–∫–Ω–æ—Ç...');
        this.shippingInfoProcessingStarted = true;
        this._messagesToDelete = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—É–ª–∏—Ü–∞ –¥–æ–º" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é');
    }

    async _processPickUpQuery(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚è≥ –ú–∏–Ω—É—Ç–æ—á–∫—É');
        this.shipping = false;
        this._confirmationMessages = await ctx.replyWithHTML('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\nüìç <b>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</b> –§—Ä—É–Ω–∑–µ –ø—Ä–æ—Å–ø–µ–∫—Ç, 46');
        this._requestContinue(ctx, '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ—Å—Ç–∞–≤–∫–∏', 'saveDataKeysArr');
    }

    async processShippingInfo(ctx) {
        const { json } = this.requestOptions;
        let { uri } = this.requestOptions;
        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç –∏–ª–∏ –ª–æ–∫–∞—Ü–∏—è)
        if (ctx.updateSubTypes.indexOf('location') !== -1) {
            // –ë—É–¥–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∞–¥—Ä–µ–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            const { latitude, longitude } = ctx.update.message.location;
            uri += `&sco=latlong&geocode=${latitude},${longitude}&kind=house&results=4`;
            console.log(uri);
        } else {
            // –ë—É–¥–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∞–¥—Ä–µ—Å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            const messageData = ctx.update.message.text.split(' ');
            if (messageData.length < 2) {
                this._messagesToDelete = await ctx.reply('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—É–ª–∏—Ü–∞ –¥–æ–º"');
                return;
            }
            const [street, house] = messageData;
            uri += `&geocode=—Ä–æ—Å—Å–∏—è+${this.shippingCity},+${street}+${house}&kind=house&results=4`;
        }
        console.log(uri);
        uri = encodeURI(uri);
        const options = { uri, json };
        this._statusMsg = await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...');
        request(options)
            .then((response) => {
                console.log(response);
                this._removeMessages(ctx, this._statusMsg);
                this._processResponse(ctx, response);
            })
            .catch(async(err) => {
                this._removeMessages(ctx, this._statusMsg);
                this._statusMsg = await ctx.reply('‚õîÔ∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                console.log(err.message);
            });
    }

    validateShippingInfo(ctx) {

    }

    _setShippingInfo(ctx, address) {

    }

    async _processResponse(ctx, responseObj) {
        const results = responseObj.response.GeoObjectCollection.featureMember;
        if (results.length > 0) {
            console.log(results);
        } else {
            this._messagesToDelete = await ctx.reply('‚õîÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤–∞–º–∏ –∞–¥—Ä–µ—Å—É.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å');
        }
    }

    _setShippingCity(ctx, city) {
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        order.city = city;
        this.shippingCity = city;
        this.requestShipping(ctx);
    }

    async displayCitiesList(ctx) {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
        // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥
        const cities = citiesList.map(item => [Markup.callbackButton(item, `_setShippingCity:${item}`)]);
        this._messagesToDelete = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥', Markup.inlineKeyboard(cities).extra());
    }

    async confirmShippingOverwrite(ctx, shipping) {
        // –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        if (shipping === false || typeof shipping !== 'object') {
            shipping = (shipping === false) ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : `(–î–æ—Å—Ç–∞–≤–∫–∞) ${shipping}`;
            this._messagesToDelete = await ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: <b>${shipping}</b>`);
            this._messagesToDelete = await ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?',
                Markup.inlineKeyboard([
                    [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', '_overwriteData:requestShipping')],
                    [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', '_leaveData:shippingValidation')],
                ]).extra({
                    disable_notification: true,
                }));
            // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è
        } else {
            const [lat, lon] = shipping;
            this._messagesToDelete = await ctx.reply('‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:');
            this._messagesToDelete = await ctx.replyWithLocation(lat, lon);
            this._messagesToDelete = await ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?', Markup.inlineKeyboard([
                [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', '_overwriteData:requestShipping')],
                [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', '_leaveData:shippingValidation')],
            ]).extra({
                disable_notification: true,
            }));
        }
    }

    returnShippingInfoForConfirmation(ctx) {}

    get shippingInfo() {
        return this.shipping;
    }

    get shippingCity() {
        return this.city;
    }

    set shippingCity(city) {
        this.city = city;
    }
}

const validateShipping = new Shipping();

shippingValidation.enter((ctx) => {
    const { shipping } = order.orderInfo;

    if (!order.city && typeof citiesList === 'object') {
        // –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, –∞ —Ç–∞–∫–∂–µ –º–∞–≥–∞–∑–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
        // –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö - –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        validateShipping.displayCitiesList(ctx);
    } else if (!order.city && typeof citiesList === 'string') {
        // –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, –Ω–æ –º–∞–≥–∞–∑–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ª–∏—à—å
        // –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ - –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        order.city = citiesList;
        validateShipping.shippingCity = citiesList;
        if (shipping !== undefined) {
            validateShipping.confirmShippingOverwrite(ctx, shipping);
        } else {
            validateShipping.requestShipping(ctx);
        }
    } else {
        // –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ–≤—ã–±–∏—Ä–∞–ª—Å—è —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–º —ç—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞
        if (shipping !== undefined) {
            validateShipping.confirmShippingOverwrite(ctx, shipping);
        } else {
            validateShipping.requestShipping(ctx);
        }
    }
});

shippingValidation.on('callback_query', (ctx) => {
    validateShipping.invokeFunction(ctx.update.callback_query.data, ctx);
});

shippingValidation.on('message', async(ctx) => {
    if (ctx.updateSubTypes.indexOf('text') !== -1 || ctx.updateSubTypes.indexOf('location') !== -1) {
        if (validateShipping.shippingInfoProcessingStarted) {
            validateShipping.processShippingInfo(ctx);
        } else {
            validateShipping._messagesToDelete = await ctx.reply('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ø–µ—Ä–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –±—É–∫–µ—Ç!');
        }
    } else {
        validateShipping._messagesToDelete = await ctx.reply('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!');
    }
});

module.exports = shippingValidation;