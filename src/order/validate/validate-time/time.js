/* eslint-disable no-underscore-dangle */
/* eslint-disable semi */
/* eslint-disable indent */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const Contacts = require('../../../main-page/contacts');
const Base = require('./../../base-class');
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
const identifyTime = require('./chunks/identify-time');
const checkTimeRelevance = require('./chunks/check-time-relevance');
const { checkTime } = require('./chunks/check-time');
const order = require('./../../order');

class Time extends Base {
    constructor() {
        super();
        this.today = new Date();
        this.tempTime = null;
        this.workingHours = {};
        this.identifyTime = identifyTime;
        this._checkTime = checkTime;
        this._checkTimeRelevance = checkTimeRelevance;
        this.messagesStorage = {
            intro: [],
            confirmation: [],
            other: [],
        };
        this.saveDataKeys = {
            keyToAssignData: 'orderTime',
            keyToAccessData: 'tempTime',
            notificationMsg: '–°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
            sceneName: 'timeValidation',
        };
        this.leaveDataInfo = 'timeValidation';
        this.overwriteDataInfo = 'requestTime';
    }

    get time() {
        return this.validatedTime;
    }

    _hasDateAndShipping(date, shipping) {
        return new Promise((resolve, reject) => {
            if (date !== undefined && shipping !== undefined) {
                resolve(date);
            } else {
                reject(Error('‚õîÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç—É –∏ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞'));
            }
        })
    }

    _getWorkingHours(date) {
        const workingHours = { start: 0, finish: 0 };
        const usedDate = new Date(date);
        if (usedDate.getDay() === 6 || usedDate.getDay() === 0) {
            const { start, finish } = Contacts.workingHours.weekends;
            workingHours.start = start;
            workingHours.finish = finish;
            return workingHours;
        }
        const { start, finish } = Contacts.workingHours.weekdays;
        workingHours.start = start;
        workingHours.finish = finish;
        this.workingHours = workingHours;
        return workingHours;
    }

    async confirmTimeOverwrite(ctx, time) {
        let minutes = new Date(time).getMinutes().toString();
        if (minutes.length === 1) {
            minutes = `0${minutes}`;
        }
        let message = await ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è: <b>${new Date(time).getHours()}:${minutes}</b>`);
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
        message = await ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?',
            Markup.inlineKeyboard([
                [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', '_overwriteData:requestTime')],
                [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', '_leaveData:timeValidation')],
            ]).extra());
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
    }

    requestTime(ctx) {
        const { orderDate, shipping } = order.orderInfo;
        let estimatedTime = 2400000;
        let additionalMessage = '';
        this._hasDateAndShipping(orderDate, shipping)
            .then(async() => {
                if (shipping !== false) {
                    estimatedTime = 5400000;
                    additionalMessage = ' –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∫ –≤–∞–º';
                }
                const { start, finish } = this._getWorkingHours(orderDate);
                const message = await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –±—É–∫–µ—Ç.\n‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú.\n‚ö†–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è <b>${estimatedTime / 60000} –º–∏–Ω.</b>, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±—É–∫–µ—Ç${additionalMessage}. –ò–º–µ–π—Ç–µ —ç—Ç–æ –≤–≤–∏–¥—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è\nüóì –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å ${start}:00 –¥–æ ${finish}:00`);
                this.messages = {
                    messageType: 'intro',
                    messageObj: message,
                };
            })
            .catch(async(error) => {
                const message = await ctx.reply(`${error.message}`,
                    Markup.inlineKeyboard(
                        [Markup.callbackButton('–í –º–µ–Ω—é –∑–∞–∫–∞–∑–∞', 'returnToMenu:timeValidation')],
                    ).extra());
                this.messages = {
                    messageType: 'other',
                    messageObj: message,
                };
            });
    }

    validateTime(ctx, timeString = null) {
        const { orderDate, shipping } = order.orderInfo;
        this.workingHours = this._getWorkingHours(orderDate);

        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–∞–Ω–µ–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ ‚Äì —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        if (this.messages.confirmation.length !== 0) {
            this.removeMessagesOfSpecificType(ctx, 'confirmation');
        }
        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–µ –∏ —Ä–∞—Å–∫–∏–¥–∞–µ–º –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        this.identifyTime(timeString)
            // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            .then(result => this._checkTimeRelevance(result))
            .then(result => this._checkTime(result, this.workingHours, { orderDate, shipping }))
            .then(async(result) => {
                let minutes = `${new Date(result).getMinutes()}`;
                this.tempTime = result;
                if (minutes.length === 1) {
                    minutes = `0${minutes}`;
                }
                if (shipping) {
                    const message = await ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫ ${new Date(result).getHours()}:${minutes}`);
                    this.messages = {
                        messageType: 'confirmation',
                        messageObj: message,
                    };
                } else {
                    const message = await ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ ${new Date(result).getHours()}:${minutes}`);
                    this.messages = {
                        messageType: 'confirmation',
                        messageObj: message,
                    };
                }
                this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è', 'saveDataKeys');
            }, async(error) => {
                const message = await ctx.reply(error.message);
                this.messages = {
                    messageType: 'other',
                    messageObj: message,
                };
            })
            .catch(async(error) => {
                const message = await ctx.reply(error.message);
                this.messages = {
                    messageType: 'other',
                    messageObj: message,
                };
            });
    }
}

const validateTime = new Time();

module.exports = validateTime;