/* eslint-disable indent */
/* eslint-disable class-methods-use-this */
/* eslint-disable padded-blocks */
/* eslint-disable no-underscore-dangle */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤
const Base = require('../../base-class');
const checkCloseAvailableDates = require('./chunks/get-close-available-dates');
const identifyDate = require('./chunks/identify-date');
const validateMonth = require('./chunks/validate-month');
const validateDay = require('./chunks/validate-day');

class ValidateDate extends Base {
    constructor() {
        super();
        // this.months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
        this.tempDate = null;
        this._availableCloseDates = [];
        this._validateMonth = validateMonth;
        this._identifyDate = identifyDate;
        this._valiadateDay = validateDay;
        this._checkCloseAvailableDates = checkCloseAvailableDates;
        this.messagesStorage = {
            intro: [],
            confirmation: [],
            other: [],
        };
        this.saveDataKeysArr = {
            keyToAssignData: 'orderDate',
            keyToAccessData: 'date',
            notificationMsg: '–°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É',
            sceneName: 'dateValidation',
        };
        this.leaveDataInfo = 'dateValidation';
        this.overwriteDataInfo = 'requestDate';
    }

    static russifyDate(date) {
        // –ü–æ–ª—É—á–∞–µ—Ç date –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
        const usedDate = new Date(date);
        return `${usedDate.getDate()} ${months[usedDate.getMonth()]} ${usedDate.getFullYear()} –≥–æ–¥–∞`;
    }

    _calculateDate(isToday) {
        let oneDay = 0;
        let result = [];
        let currentDate;
        if (!isToday) {
            oneDay = 86400000;
        }
        currentDate = new Date(Date.now() + oneDay);
        result.push(currentDate.getDate());
        result.push(currentDate.getMonth());
        return result;
    }

    async _quickDatePick(ctx, chosenDate) {
        // –í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "—Å–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–∑–∞–≤—Ç—Ä–∞"
        // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        // –ó–∞—Ç–µ–º –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ js –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, 'üóì –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –¥–∞—Ç—É...');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∞—Ç—É
        if (chosenDate === '—Å–µ–≥–æ–¥–Ω—è') {
            this._setTempDate(this._calculateDate(true));
        } else {
            this._setTempDate(this._calculateDate(false));
        }

        if (this.messages.confirmation.length !== 0) {
            this.removeMessagesOfSpecificType(ctx, 'confirmation');
        }
        // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        const message = await ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ ${ValidateDate.russifyDate(this.date)}`);
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
        this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'saveDataKeysArr');
    }

    _calculateDaysInMonth(month, year) {
        return new Date(year, month + 1, 0).getDate();
    }

    async requestDate(ctx) {
        const now = new Date();
        this._availableCloseDates = this._checkCloseAvailableDates(now);
        let message = await ctx.reply('–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞—Ç—É',
            Markup.keyboard([
                ['üìú –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'],
                ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
            ])
            .oneTime()
            .resize()
            .extra());
        this.messages = {
            messageType: 'other',
            messageObj: message,
        };
        message = await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞ –¥–∞—Ç:\n‚úÖ 14 —Ñ–µ–≤—Ä–∞–ª—è;\n‚úÖ 14.02;\n–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç—É –¥–∞—Ç—É ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é',
            Markup.inlineKeyboard(this._availableCloseDates).extra());
        this.messages = {
            messageType: 'intro',
            messageObj: message,
        };
    }

    validateDate(ctx, userInput) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        this._identifyDate(userInput)
            // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—Ü
            .then(result => this._validateMonth(result))
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å
            .then(
                result => this._valiadateDay(result),
                (error) => {
                    throw error;
                },
            )
            .then(async(resultDate) => {
                // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è –¥–∞—Ç—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
                // —ç—Ç–∞ –¥–∞—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                this._setTempDate(resultDate);

                if (this.messages.confirmation.length !== 0) {
                    // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∞—Ç–∞ –∏ –±—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ
                    // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑
                    this.removeMessagesOfSpecificType(ctx, 'confirmation');
                }

                const message = await ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ ${ValidateDate.russifyDate(this.tempDate)}`);
                this.messages = {
                    messageType: 'confirmation',
                    messageObj: message,
                };
                this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'saveDataKeysArr');
            })
            .catch(async(error) => {
                if (this.messages.confirmation.length !== 0) {
                    this.removeMessagesOfSpecificType(ctx, 'confirmation');
                }
                if (error.message === '—Å–µ–≥–æ–¥–Ω—è') {
                    this._setTempDate(this._calculateDate(true));
                    const message = await ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ ${ValidateDate.russifyDate(this.tempDate)}`);
                    this.messages = {
                        messageType: 'confirmation',
                        messageObj: message,
                    };
                    this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'saveDataKeysArr');

                } else if (error.message === '–∑–∞–≤—Ç—Ä–∞') {
                    this._setTempDate(this._calculateDate(false));
                    const message = await ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ ${ValidateDate.russifyDate(this.tempDate)}`);
                    this.messages = {
                        messageType: 'confirmation',
                        messageObj: message,
                    };
                    this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'saveDataKeysArr');

                } else {
                    const message = await ctx.reply(error.message);
                    this.messages = {
                        messageType: 'other',
                        messageObj: message,
                    };
                }
            });
    }

    _setTempDate(date) {
        // –î–∞—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ orderInfo —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º—É –Ω–∞–¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        // –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è
        let result = new Date();
        const [day, month] = date;
        result.setDate(day);
        result.setMonth(month);
        this.tempDate = Date.parse(result);
    }

    async confirmDateOverride(ctx, date) {
        // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–µ—É—é –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–µ
        // –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
        let message = await ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç—É –¥–∞—Ç—É: <b>${date}</b>`);
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
        message = ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?', Markup.inlineKeyboard([
            [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', `_overwriteData:${this.overwriteDataInfo}`)],
            [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', `_leaveData:${this.leaveDataInfo}`)],
        ]).extra());
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
    }

    get date() {
        return this.tempDate;
    }
}

const validateDate = new ValidateDate();

module.exports = { validateDate, ValidateDate };