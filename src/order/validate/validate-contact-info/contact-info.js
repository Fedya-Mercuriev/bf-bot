/* eslint-disable no-underscore-dangle */
/* eslint-disable indent */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const Base = require('./../../base-class');
const order = require('./../../order');
const { leave } = Stage;

const contactInfoValidation = new Scene('contactInfoValidation');

class ContactInfo extends Base {
    constructor() {
        super();
        this.phoneNumber = undefined;
        this.saveDataKeysArr = {
            keyToAssignData: 'contactInfo',
            keyToAccessData: 'phoneNumber',
            notificationMsg: '–°–æ—Ö—Ä–∞–Ω—è—é –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            sceneName: 'contactInfoValidation',
        };
        this.leaveDataInfo = 'contactInfoValidation';
        this.overwriteDataInfo = 'requestContactInfo';
    }

    async requestContactInfo(ctx) {
        this._messagesToDelete = await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "8**********".\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –∏ —è –≤—Å–µ —Å–¥–µ–ª–∞—é —Å–∞–º üôÉ',
            Markup.keyboard([
                [{
                    text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true,
                }],
                ['üì± –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'],
                ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑Ô∏è'],
            ])
            .oneTime()
            .resize()
            .extra(),
        );
    }

    identifyDataType(ctx, updateSubType) {
        const data = ctx.update.message[updateSubType];
        if (this._confirmationMessages.length) {
            this._removeConfirmationMessages(ctx);
        }
        if (data.phone_number) {
            // –í—ã–∑–æ–≤–µ–º –æ–∫–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            this._setTempPhoneNumber(ctx, data.phone_number);
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            this.checkPhoneNumber(ctx, data);
        }
    }

    async checkPhoneNumber(ctx, givenPhoneNumber) {
        const validatedPhoneNumber = givenPhoneNumber.match(/^(\+7|8|7)\d{10}$/i);
        if (validatedPhoneNumber !== null) {
            this._setTempPhoneNumber(ctx, validatedPhoneNumber[0]);
        } else {
            this._messagesToDelete = await ctx.reply('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "8**********" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"');
        }
    }

    async _setTempPhoneNumber(ctx, data) {
        const result = `+7${data.slice(-10)}`;
        this.phoneNumber = result;
        this._confirmationMessages = await ctx.replyWithHTML(`–í—ã –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>${this.phoneNumber}</b>`);
        this._confirmationMessages = this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'saveDataKeysArr');
    }

    async confirmInfoOverwrite(ctx, contactInfo) {
        this._messagesToDelete = await ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>${contactInfo}</b>`);
        this._messagesToDelete = await ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?',
            Markup.inlineKeyboard([
                [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', '_overwriteData:requestContactInfo')],
                [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', '_leaveData:contactInfoValidation')],
            ]).extra({
                disable_notification: true,
            }));
    }
}

const validateContactInfo = new ContactInfo();

contactInfoValidation.enter((ctx) => {
    const { contactInfo } = order.orderInfo;
    if (contactInfo !== undefined) {
        validateContactInfo.confirmInfoOverwrite(ctx, contactInfo);
    } else {
        validateContactInfo.requestContactInfo(ctx);
    }
});

contactInfoValidation.on('message', async(ctx) => {
    if (ctx.updateSubTypes[0] === 'text') {
        if (ctx.update.message.text.match(/–º–µ–Ω—é –∑–∞–∫–∞–∑–∞/i)) {
            validateContactInfo.returnToMenu(ctx, order.displayInterface.bind(order), 'dateValidation');
        } else if (ctx.update.message.text.match(/—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º/i)) {
            validateContactInfo.displayPhoneNumber(ctx);
        } else if (ctx.update.message.text.match(/–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑/i)) {
            validateContactInfo.cancelOrder(ctx);
        } else {
            validateContactInfo.identifyDataType(ctx, ctx.updateSubTypes[0]);
        }
    } else if (ctx.updateSubTypes[0] === 'contact') {
        validateContactInfo.identifyDataType(ctx, ctx.updateSubTypes[0]);
    } else {
        validateContactInfo._messagesToDelete = await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç üòê');
    }
});

contactInfoValidation.on('callback_query', (ctx) => {
    try {
        validateContactInfo.invokeFunction(ctx.update.callback_query.data, ctx);
    } catch (error) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚õî C–µ–π—á–∞—Å —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!');
    }
});

module.exports = contactInfoValidation;