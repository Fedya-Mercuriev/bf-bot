/* eslint-disable class-methods-use-this */
/* eslint-disable no-underscore-dangle */
/* eslint-disable indent */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const Base = require('./../../base-class');
// const order = require('./../../order');

class ContactInfo extends Base {
    constructor() {
        super();
        this.phoneNumber = undefined;
        this.messagesStorage = {
            intro: [],
            confirmation: [],
            other: [],
        };
        this.saveDataKeys = {
            keyToAssignData: 'contactInfo',
            keyToAccessData: 'phoneNumber',
            notificationMsg: '–°–æ—Ö—Ä–∞–Ω—è—é –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            sceneName: 'contactInfoValidation',
        };
        this.leaveDataInfo = 'contactInfoValidation';
        this.overwriteDataInfo = 'requestContactInfo';
    }

    async requestContactInfo(ctx) {
        const message = await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "8**********".\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –∏ —è –≤—Å–µ —Å–¥–µ–ª–∞—é —Å–∞–º üôÉ',
            Markup.keyboard([
                [{
                    text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true,
                }],
                ['üì± –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'],
                ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑Ô∏è'],
            ])
            .oneTime()
            .resize()
            .extra());
        this.messages = {
            messageType: 'intro',
            messageObj: message,
        };
    }

    identifyDataType(ctx, updateSubType) {
        const data = ctx.update.message[updateSubType];
        if (this.messages.confirmation.length) {
            this.removeMessagesOfSpecificType(ctx, 'confirmation');
        }
        if (data.phone_number) {
            // –í—ã–∑–æ–≤–µ–º –æ–∫–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            this._setTempPhoneNumber(ctx, data.phone_number);
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            this.checkPhoneNumber(ctx, data);
        }
    }

    async checkPhoneNumber(ctx, givenPhoneNumber) {
        const validatedPhoneNumber = givenPhoneNumber.match(/^(\+7|8|7)\d{10}$/i);
        if (validatedPhoneNumber !== null) {
            this._setTempPhoneNumber(ctx, validatedPhoneNumber[0]);
        } else {
            const message = await ctx.reply('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "8**********" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"');
            this.messages = {
                messageType: 'other',
                messageObj: message,
            };
        }
    }

    async _setTempPhoneNumber(ctx, data) {
        const result = `+7${data.slice(-10)}`;
        this.phoneNumber = result;
        const message = await ctx.replyWithHTML(`–í—ã –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>${this.phoneNumber}</b>`);
        this._requestContinue(ctx, '–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'saveDataKeys');
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
    }

    async confirmInfoOverwrite(ctx, contactInfo) {
        let message = await ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>${contactInfo}</b>`);
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
        message = await ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?',
            Markup.inlineKeyboard([
                [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', '_overwriteData:requestContactInfo')],
                [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', '_leaveData:contactInfoValidation')],
            ]).extra({
                disable_notification: true,
            }));
        this.messages = {
            messageType: 'confirmation',
            messageObj: message,
        };
    }
}

const validateContactInfo = new ContactInfo();

module.exports = validateContactInfo;