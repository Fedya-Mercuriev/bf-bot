/* eslint-disable no-restricted-syntax */
/* eslint-disable no-await-in-loop */
/* eslint-disable no-underscore-dangle */
/* eslint-disable indent */
const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const order = require('./../../order');
const Base = require('./../../base-class');

class Bouquets extends Base {
    constructor() {
        super();
        this._availableBouquets = null;
        this._pageNum = 1;
        this._welcomeMsg = '–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–µ–ª–∞–µ–º—ã–π –±—É–∫–µ—Ç!';
        this._messagesToDelete = [];
        this._chosenType = null;
        this._bouquetsCatalogMessages = [];
    }

    get availableBouquets() {
        return this._availableBouquets;
    }

    set availableBouquets(bouquet) {
        this._availableBouquets.push(bouquet);
    }

    get bouquetCatalogMessages() {
        return this._bouquetsCatalogMessages;
    }

    set bouquetCatalogMessages(message) {
        if (message !== 'clearArr') {
            this._bouquetsCatalogMessages.push(message);
        } else {
            this._bouquetsCatalogMessages.length = 0;
        }
    }

    static addCallbackDataToBouquets(bouquets) {
        const bouquetesArr = bouquets;

        bouquetesArr.forEach((bouquet, index) => {
            bouquet.data = `chooseBouquet:${index}`;
        });
        return bouquetesArr;
    }

    // invokeFunction(funcName) {
    //     this[funcName](arguments[1]);
    // }

    _getCatalogPages() {
        return Math.ceil(this.availableBouquets.length / 5);
    }

    // –í—ã–¥–∞–µ—Ç –ø–∞—á–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ (5—à—Ç) –∑–∞ —Ä–∞–∑
    _displayBouquetPack(pageNum) {
        // pageNum –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–æ–º,
        // –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Å—Å–∏–≤–∞
        if (pageNum - 1 < 0) {
            return false;
        } else if (pageNum - 1 === this.availableBouquets) {
            return false;
        } else {
            return this.availableBouquets.slice((pageNum - 1) * 5, (pageNum - 1) * 5 + 5);
        }
    }

    displayCatalog(ctx) {
        this._displayCatalogPage(ctx)
            .then((msgWereSent) => {
                if (msgWereSent) {
                    this._displayPagination(ctx);
                }
            });
    }

    _clearCatalogPageContent(ctx) {
        this.bouquetCatalogMessages.forEach(({ message_id: id }) => {
            try {
                ctx.deleteMessage(id);
            } catch (error) {
                console.log(error);
            }
        });
        this.bouquetCatalogMessages = 'clearArr';
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤
    async _displayCatalogPage(ctx) {
        // –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞—á–∫—É –±—É–∫–µ—Ç–æ–≤, –≤–Ω–∏–∑—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –¥—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–∞—á–∫–∞–º–∏ –±—É–∫–µ—Ç–æ–≤
        const bouquetsPack = this._displayBouquetPack(this._pageNum);

        if (bouquetsPack) {
            for (const bouquet of bouquetsPack) {
                // –§–æ—Ä–º–∞—Ç caption: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å
                const photoCaption = `<b>${bouquet.name}</b>\n${bouquet.description}\n<i>–°—Ç–æ–∏–º–æ—Å—Ç—å:</i> ${bouquet.price}‚ÇΩ`;

                this.bouquetCatalogMessages = await ctx.telegram.sendPhoto(ctx.chat.id, bouquet.photo, {
                    caption: photoCaption,
                    parse_mode: 'HTML',
                    disable_notification: true,
                    reply_markup: Markup.inlineKeyboard([
                        Markup.callbackButton('–í—ã–±—Ä–∞—Ç—å', bouquet.data),
                    ]),
                }, );
            }
            return true;
        }
        // –ó–∞–ø–∏—à–µ–º –º–∞—Å—Å–∏–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–≤–æ–π—Å—Ç–≤–æ messages –≤ –æ–±—ä–µ–∫—Ç–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
    }

    // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
    async _displayPagination(ctx) {
        this._bouquetsCatalogMessages.push(
            await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É',
                Markup.inlineKeyboard([
                    [Markup.callbackButton(`–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${this._pageNum} –∏–∑ ${Math.ceil(this.availableBouquets.length / 5)}`, 'showPage')],
                    [
                        Markup.callbackButton('< –ü—Ä–µ–¥.', 'openPreviousPage'),
                        Markup.callbackButton('–°–ª–µ–¥. >', 'openNextPage'),
                    ],
                ]).extra(),
            ),
        );
    }

    // _cleanScene(ctx) {
    //     ctx.scene.messages = this._messagesToDelete.concat(this._bouquetsCatalogMessages);
    //     ctx.scene.messages.forEach(({ message_id: id }) => {
    //         try {
    //             ctx.deleteMessage(id);
    //         } catch (error) {
    //             console.log(error);
    //         }
    //     });
    // }

    showPage(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${this._pageNum} –∏–∑ ${Math.ceil(this.availableBouquets.length / 5)}`);
    }

    askToChooseBouquet(ctx) {
        ctx.reply(this._welcomeMsg).then((result) => {
            this._messagesToDelete.push(result);
            this.displayCatalog(ctx);
        });
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞
    openPreviousPage(ctx) {
        if (this._pageNum !== 1) {
            ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            this._pageNum -= 1;
            this._clearCatalogPageContent(ctx);
            this.displayCatalog(ctx);
        } else {
            ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞
    openNextPage(ctx) {
        if (this._pageNum < this._getCatalogPages()) {
            ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            this._pageNum += 1;
            this._clearCatalogPageContent(ctx);
            this.displayCatalog(ctx);
        } else {
            ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }
    }

    chooseBouquet(ctx, bouquetNumber) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '');
        // –ò–∑–≤–ª–µ—á–µ–º —Ñ–æ—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–≤—Ç–æ—Ä–∞—è —Å–≤–µ—Ä—Ö—É)
        const photoId = ctx.update.callback_query.message.photo[1].file_id;
        /* –¢–∏–ø—ã:
            @photoId = String
            @title = String
            @description = String
            @price = String
        */
        // –ò–∑–≤–ª–µ—á–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        const chosenBouquetCard = this.availableBouquets[bouquetNumber];
        let [title, description, price] = ctx.update.callback_query.message.caption.split('\n');
        // –ò–∑–≤–ª–µ—á–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –±—É–∫–µ—Ç–∞
        price = price.replace(/^\D+/g, '');
        const caption = `–í—ã –≤—ã–±—Ä–∞–ª–∏: \n<b>${title}</b>\n${description}\n<i>–°—Ç–æ–∏–º–æ—Å—Ç—å:</i> ${price}`;

        ctx.telegram.sendPhoto(ctx.chat.id, photoId, {
            caption,
            parse_mode: 'HTML',
            reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏', 'saveChosenBouquet')],
                [Markup.callbackButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', 'returnToCatalog')],
            ]),
        });
    }

    saveChosenBouquet(ctx) {
        // –í –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±—É–∫–µ—Ç–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã:
        // * –Ω–∞–∑–≤–∞–Ω–∏–µ
        // * —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–∫–µ—Ç–∞
        // * —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–µ—Ç–∞

        let [_msgTitle, title, _description, price] = ctx.update.callback_query.message.caption.split('\n'),
            photoId = ctx.update.callback_query.message.photo[1].file_id,
            bouquetInformation = {};

        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç');
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);

        bouquetInformation.title = title;
        bouquetInformation.photo = photoId;
        bouquetInformation.price = price.replace(/^\D+/g, '');

        // –ó–∞–ø–∏—à–µ–º –≤ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–≤–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç
        order.orderInfo = ['bouquet', bouquetInformation];
        ctx.scene.leave('bouqtypeValidation');
    }

    returnToCatalog(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '');
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
    }

    confirmBouquetOverride(ctx, chosenBouquet) {
        const { title, photo, price } = chosenBouquet,
        cardCaption = `üíê<b>${title}</b>\nüí∏–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}`,
            warningMsg = '\n –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç?';

        // chosenBouquet —Ö—Ä–∞–Ω–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:
        // * title - –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ (String)
        // * photo - —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±—É–∫–µ—Ç–∞ (String)
        // * price - —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–µ—Ç–∞ (Number)

        ctx.reply('–í—ã —Ä–∞–Ω—å—à–µ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç–æ—Ç –±—É–∫–µ—Ç:').then(message => {
            this._messagesToDelete.push(message);
            return ctx.telegram.sendPhoto(ctx.chat.id, photo, {
                caption: cardCaption + warningMsg,
                parse_mode: 'HTML',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç', 'leaveChosenBouquet')],
                    [Markup.callbackButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', 'chooseDifferentBouquet')],
                ]),
            }).then(message => {
                this._messagesToDelete.push(message);
            });
        });
    }

    leaveChosenBouquet(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–í—ã—Ö–æ–∂—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        ctx.scene.leave('bouqtypeValidation');
    }

    chooseDifferentBouquet(ctx) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥');
        this.displayCatalog(ctx);
    }
}

const bouquets = new Bouquets();

module.exports = bouqtypeValidation;