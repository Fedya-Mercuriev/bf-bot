/* eslint-disable indent */
const Telegraf = require('telegraf');
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const order = require('./../order/order');
const validateContactInfo = require('./../order/validate/validate-contact-info/contact-info');

const contactInfoValidation = new Scene('contactInfoValidation');

contactInfoValidation.enter((ctx) => {
    ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    const { contactInfo } = order.orderInfo;
    if (contactInfo !== undefined) {
        validateContactInfo.confirmInfoOverwrite(ctx, contactInfo);
    } else {
        validateContactInfo.requestContactInfo(ctx);
    }
});

contactInfoValidation.on('message', async(ctx) => {
    if (ctx.updateSubTypes[0] === 'text') {
        if (ctx.update.message.text.match(/–º–µ–Ω—é –∑–∞–∫–∞–∑–∞/i)) {
            validateContactInfo.returnToMenu(ctx, 'contactInfoValidation');
        } else if (ctx.update.message.text.match(/—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º/i)) {
            validateContactInfo.displayPhoneNumber(ctx);
        } else if (ctx.update.message.text.match(/–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑/i)) {
            validateContactInfo.cancelOrder(ctx);
        } else {
            validateContactInfo.identifyDataType(ctx, ctx.updateSubTypes[0]);
        }
    } else if (ctx.updateSubTypes[0] === 'contact') {
        validateContactInfo.identifyDataType(ctx, ctx.updateSubTypes[0]);
    } else {
        const message = await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç üòê');
        this.messages = {
            messageType: 'other',
            messageObj: message,
        };
    }
});

contactInfoValidation.on('callback_query', (ctx) => {
    try {
        validateContactInfo.invokeFunction(ctx.update.callback_query.data, ctx);
    } catch (error) {
        ctx.telegram.answerCbQuery(ctx.update.callback_query.id, '‚õî C–µ–π—á–∞—Å —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!');
    }
});

module.exports = contactInfoValidation;