const Telegraf = require('telegraf');
const { Markup } = Telegraf;
const Extra = require('telegraf/extra');

class Contacts {
    constructor() {
        this.contactInfo = {
            num: "+79138201801",
            firstName: "–õ—é–¥–º–∏–ª–∞",
            lastName: "–ì–æ—Ä–∫–æ–ª—å—Ü–µ–≤–∞"
        };

        this.workingHours = {
            weekdays: {
                start: 10,
                finish: 20
            },
            weekends: {
                start: 11,
                finish: 19
            }
        };

        this.venue = {
            coordinates: [56.4766215, 84.9634409],
            address: "–§—Ä—É–Ω–∑–µ –ø—Ä–æ—Å–ø–µ–∫—Ç, 46"
        };

        this.instagramUrl = "https://www.instagram.com/bf_tomsk";
    }

    _isWeekend() {
        let today = new Date();
        if (today.getDay() === 6 || today.getDay() === 0) {
            return true;
        } else {
            return false;
        }
    }

    showPhoneNumber(ctx) {
        return ctx.telegram.sendContact(ctx.chat.id, this.contactInfo.num,
            this.contactInfo.firstName, this.contactInfo.lastName, false);
    }

    displayContactInfo(ctx) {
        let workingHours;

        // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ —Å–µ–π—á–∞—Å –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã
        if (this._isWeekend()) {
            let { start, end } = this.workingHours.weekends;
            workingHours = `–°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å ${start}:00 –¥–æ ${end}:00`;
        } else {
            workingHours = "–°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 20:00";
        }

        ctx.telegram.sendMessage(ctx.chat.id, "–ó–≤–æ–Ω–∏—Ç–µ").then(() => {
            return ctx.telegram.sendContact(ctx.chat.id, this.contactInfo.num,
                this.contactInfo.firstName, this.contactInfo.lastName, false).then(() => {
                return ctx.reply(workingHours, Extra.notifications(false));
            }).then(() => {
                return ctx.reply("–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞?",
                    Markup.inlineKeyboard([
                        Markup.callbackButton('–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å', '–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å')
                    ]).extra(), false
                );
            });
        });
    };

    showAddress(ctx) {
        let [lat, lon] = this.venue.coordinates;

        ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç—É ü§î");
        ctx.telegram.deleteMessage(ctx.update['callback_query'].message.chat.id, ctx.update['callback_query'].message['message_id']);
        ctx.telegram.sendVenue(ctx.chat.id, lat, lon, "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –≥–æ—Å—Ç–∏", this.venue.address, false)
            .then(() => {
                return ctx.reply("–ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å Instagram",
                    Markup.inlineKeyboard([
                        Markup.urlButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", this.instagramUrl)
                    ]).extra(), false);
            });
    }

    static get workingHours() {
        return this.workingHours;
    }
}

module.exports = new Contacts();