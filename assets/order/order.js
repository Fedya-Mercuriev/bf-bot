const Telegraf = require('telegraf');
const {Extra, Markup} = Telegraf;
const Invoice =  require('./invoice');
// const OrderInfo = require('./order-info');

module.exports = class Order {
    constructor() {
        this.info = {
            contactInfo: undefined,
            orderDate: undefined,
            orderTime: undefined,
            // orderDateInNumbers: undefined,
            bouquetType: undefined,
            shipping: undefined,
            bouquetPrice: undefined
        };
        this.orderIsInitialised = false;
        this.welcomeMsg = `–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
            \n–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–∫—Ç–∞ –º–µ–Ω—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å ‚úÖ`;

        // –ò–Ω–≤–æ–π—Å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ
        this.invoice = new Invoice();
        this.buttons = {
            orderDate: {
                emoji: 'üìÖ',
                text: '–î–∞—Ç–∞',
                callback_data: 'dateValidation',
                // –†–∞–Ω—å—à–µ –±—ã–ª–æ this.orderInfo.orderDate
                data: this.info.orderDate
            },
            shipping: {
                emoji: 'üõµ',
                text: '–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞',
                callback_data: 'shippingValidation',
                data: this.info.shipping
            },
            orderTime: {
                emoji: '‚è±',
                text: '–í—Ä–µ–º—è',
                callback_data: 'timeValidation',
                data: this.info.orderTime
            },
            bouquetType: {
                emoji: 'üíê',
                text: '–¢–∏–ø –±—É–∫–µ—Ç–∞',
                callback_data: 'bouqType',
                data: this.info.bouquetType
            },
            bouquetPrice: {
                emoji: 'üí∏',
                text: '–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–µ—Ç–∞',
                callback_data: 'bouqCost',
                data: this.info.bouquetPrice
            },
            contactInfo: {
                emoji: 'üì≤',
                text: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                callback_data: 'contactInfo',
                data: this.info.contactInfo
            }
        };
    }

    get getOrderInfo() {
        return this.info;
    }

    set setOrderInfo(settings) {
        let [prop, val] = settings;
        this.info[prop] = val;
    }

    launch(ctx) {
        console.log("*** –ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–æ–≤");
        this.orderIsInitialised = true;
        ctx.reply("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!", Markup.keyboard([
                ['üì± –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'],
                ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'],
                ['‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑Ô∏è']
            ])
            .oneTime()
            .resize()
            .extra()
        );
        this.displayInterface(ctx, this.welcomeMsg);
    }

    makeInterface() {
        let buttonsArr = [];
        for (let prop in this.buttons) {
            if (!this.buttons.hasOwnProperty(prop)) continue;
            let result = [];
            console.log(`${this.buttons[prop].text} = ${this.buttons[prop].data}`)
            if (this.info[prop] !== undefined) {
                result.push(Markup.callbackButton(`‚úÖ ${this.buttons[prop].text}`, `${this.buttons[prop].callback_data}`));
                buttonsArr.push(result);
            } else {
                result.push(Markup.callbackButton(`${this.buttons[prop].emoji} ${this.buttons[prop].text}`,
                    `${this.buttons[prop].callback_data}`));
                buttonsArr.push(result);
            }
        }
        return Markup.inlineKeyboard(buttonsArr).extra();
    }

    displayInterface(ctx, msg) {
        return ctx.reply(msg, this.makeInterface());
    }

    cancelOrder(ctx) {
        if (!this.orderIsInitialised) {
            return;
        }
        this.orderIsInitialised = false;
        ctx.reply("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!");
        for (let prop in this.orderInfo) {
            if (!this.orderInfo.hasOwnProperty(prop)) continue;
            this.orderInfo[prop] = undefined;
        }
    }
};