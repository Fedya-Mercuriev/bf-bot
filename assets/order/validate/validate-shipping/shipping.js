const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const Contacts = require("../../../main-page/contacts");
const { leave } = Stage;
const order = require('../../../../core');
const ServiceOps = require('../../../service-ops');

const shippingValidation = new Scene('shippingValidation');

class Shipping {
    constructor() {
       this.shipping = undefined;
    }

    requestShipping(ctx) {
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –±—É–∫–µ—Ç üëá",
            Markup.inlineKeyboard([
                [Markup.callbackButton('üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑', '—Å–∞–º–æ–≤—ã–≤–æ–∑')],
                [Markup.callbackButton('üõµ –î–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞')]
            ]).extra()
        )
    }

    requestShippingInfo(ctx) {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é');
    }

    processShippingInfo(address) {
        this.shipping = address;
    }

    returnShippingInfoForConfirmation(ctx) {
        if (typeof this.shipping === 'string') {
            ctx.reply(`üó∫ –í—ã –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å: ${this.shipping}`);
        } else {
            let [latitude, longitude] = this.shipping;
            ctx.replyWithLocation(ctx.chat.id, latitude, longitude);
        }
    }

    get shippingInfo() {
        return this.shipping;
    }

    set shippingInfo(address) {
        this.shipping = address;
    }
};

const validateShipping = new Shipping();

shippingValidation.enter((ctx) => {
    validateShipping.requestShipping(ctx);
});

shippingValidation.on('callback_query', (ctx) => {
    ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "");
    if (ctx.update['callback_query'].data === '—Å–∞–º–æ–≤—ã–≤–æ–∑') {
        validateShipping.shippingInfo = false;
        ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.update['callback_query'].data}.\nüìç –ù–∞—à –∞–¥—Ä–µ—Å: –§—Ä—É–Ω–∑–µ –ø—Ä–æ—Å–ø–µ–∫—Ç, 46`).then(() => {
            ServiceOps.requestContinue(ctx, "–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞");
        });

    } else if (ctx.update['callback_query'].data === '–¥–æ—Å—Ç–∞–≤–∫–∞') {
        validateShipping.requestShippingInfo(ctx);

    } else {
        order.setOrderInfo = ['shipping', validateShipping.shippingInfo];
        ctx.telegram.deleteMessage(ctx.update['callback_query'].message.chat.id, ctx.update['callback_query'].message['message_id']);
        order.displayInterface(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º");
        ctx.scene.leave('shippingValidation');
    }
});

shippingValidation.hears('/–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞/gi', (ctx) => {
    order.displayInterface(ctx, `–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
            \n–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–∫—Ç–∞ –º–µ–Ω—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å ‚úÖ`);
});

shippingValidation.hears('/–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º/gi', (ctx) => {
    Contacts.showPhoneNumber(ctx);
});

shippingValidation.hears('/‚õî–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑/gi', (ctx) => {
    order.cancelOrder(ctx);
    ctx.scene.leave();
});

shippingValidation.on('message', (ctx) => {
    if (ctx.updateSubTypes.indexOf('location') !== -1) {
        validateShipping.shippingInfo = [ctx.update.message.location.latitude, ctx.update.message.location.longitude];
        let [latitude, longitude] = validateShipping.shippingInfo;
        ctx.reply("–í–æ—Ç —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏:");
        ctx.telegram.sendLocation(ctx.chat.id, latitude, longitude).then(() => {
            ServiceOps.requestContinue(ctx, "–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å");
        })
        // ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é`);
    } else if (ctx.updateSubTypes.indexOf('text') !== -1) {
        validateShipping.shippingInfo = (ctx.update.message.text);
        ctx.reply(`üó∫ –í—ã –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å: ${validateShipping.shippingInfo}`).then(() => {
            ServiceOps.requestContinue(ctx, "–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å");
        });
    } else {
        ctx.reply("‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!");
    }
    console.log(ctx);
});

module.exports = validateShipping;
module.exports = shippingValidation;


