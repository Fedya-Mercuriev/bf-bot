const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const Contacts = require("../../../main-page/contacts");
const { leave } = Stage;
const order = require('../../../../core');
const ServiceOps = require('../../../service-ops');

const timeValidation = new Scene('timeValidation');

class Time {
    constructor() {
        this.today = new Date();
        this.validatedTime = undefined;
        this.workingHours = {};
    }

    get time() {
        return this.validatedTime;
    }

    set time(time) {
        this.validatedTime = time;
    }

    _hasDateAndShipping(date, shipping) {
        return new Promise((resolve, reject) => {
            if (date !== undefined && shipping !== undefined) {
                resolve(date);
            } else {
                reject(Error('‚õîÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç—É –∏ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞'));
            }
        })
    }

    _getWorkingHours(date) {
        let workingHours = {start: 0, finish: 0},
            usedDate = new Date(date);
        if (usedDate.getDay() === 6 || usedDate.getDay() === 0) {
            let { start, finish } = Contacts.workingHours.weekends;
            workingHours.start = start;
            workingHours.finish = finish;
            return workingHours;
        } else {
            let { start, finish } = Contacts.workingHours.weekdays;
            workingHours.start = start;
            workingHours.finish = finish;
            this.workingHours = workingHours;
            return workingHours;
        }
    }

    _isToday(date) {
        let usedDate = new Date(date);
        if (usedDate.getFullYear() === this.today.getFullYear() && usedDate.getMonth() === this.today.getMonth() && usedDate.getDate() === this.today.getDate()) {
            return true;
        } else {
            return false;
        }
    }

    confirmTimeOverwrite(ctx, time) {
        let minutes = "" + new Date(this.validatedTime).getMinutes();
        if (minutes.length === 1) {
            minutes = "0" + minutes;
        }
        ctx.replyWithHTML(`‚ö†Ô∏è –í—ã —Ä–∞–Ω–µ–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è: <b>${new Date(time).getHours()}:${minutes}</b>`).then(() => {
            return ctx.reply("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?", Markup.inlineKeyboard([
                [Markup.callbackButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', 'overwriteData')],
                [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', 'leaveData')]
            ]).extra());
        });
    }

    requestTime(ctx) {
        let { orderDate, shipping } = order.getOrderInfo,
            estimatedTime = 2400000,
            additionalMessage = "";
            // closestTime = this._calculateClosestTime(),
            // hours = closestTime.getHours(),
            // minutes = closestTime.getMinutes();
        console.log(`${orderDate} : ${shipping}`);
        this._hasDateAndShipping(orderDate, shipping).then(
            () => {
                if (shipping !== false) {
                    estimatedTime = 5400000;
                    additionalMessage = " –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∫ –≤–∞–º";
                }
                let { start, finish } = this._getWorkingHours(orderDate);
                ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –±—É–∫–µ—Ç.\n‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú.\n‚ö†–° —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è <b>${estimatedTime / 60000} –º–∏–Ω.</b>, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±—É–∫–µ—Ç${additionalMessage}. –ò–º–µ–π—Ç–µ —ç—Ç–æ –≤–≤–∏–¥—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è\nüóì –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å ${start}:00 –¥–æ ${finish}:00`);
            }).catch((error) => {
                ctx.reply(`${error.message}`, Markup.inlineKeyboard(
                    [Markup.callbackButton('–í –º–µ–Ω—é –∑–∞–∫–∞–∑–∞', 'openMenu')]
                ).extra());
            });
    }

    identifyTime(timeString) {
        return new Promise((resolve, reject) => {
            let timeArray;
            if (timeString.match(/(\d+)[\s\/.,:\\-](\d+)/g) !== null) {
                // –£–ø–∞–∫—É–µ–º –¥–∞–Ω–Ω—ã–µ (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã) –≤ –º–∞—Å—Å–∏–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º
                timeArray = timeString.split(/[\s\/.,:\\-]/);
                for (let data in timeArray) {
                    if (isNaN(data)) {
                        // –µ—Å–ª–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ —á–∏—Å–ª–æ–≤–æ–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
                        reject(new Error("‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"));
                    }
                }
                resolve(timeArray);
            } else {
                reject(new Error("‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"));
            }
        });
    }

    _checkHours(date, timeToCompareWith) {
        return new Promise((resolve, reject) => {
            // date = –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—ã
            if (date.getHours() > timeToCompareWith.getHours() && date < finishWork - estTime) {
                return true;
            } else {
                return false;
            }
        });
    }

    // –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∑–∞—Ö–æ–¥–∏—Ç—å (—Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
    _calculateTimeLimits(orderDate, workTime, estTime) {
        // orderDate = ms; estTime = ms; workTime = ms;
        // return (workTime * 3600000) + estTime + orderDate;
        return workTime + estTime;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Å–ø–µ–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è —Å–¥–µ–ª–∞—Ç—å –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–µ—Ç
    _compareTime(targetTime, workingHours) {
        // targetTime - –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, workingHours - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ (–Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã)
        // usedTime = ms; start = ms; finish = ms; shipping = boolean
        let {start, finish} = workingHours,
            startWork = new Date(start),
            finishWork = new Date(finish),
            // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–∏–∞–Ω—ã –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ–≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ª–∏–±–æ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º
            median = Math.floor((finishWork.getHours() - startWork.getHours()) / 2);
        let difference = start - targetTime;
        return new Promise((resolve, reject) => {
            if (new Date(targetTime).getHours() < new Date(start).getHours() + median) {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å—Ç–∞—Ä—Ç–æ–º
                if (start - targetTime <= 0) {
                    resolve();
                } else {
                    reject();
                }

            } else {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–∏–Ω–∏—à–µ–º
                if (finish - targetTime >= 0) {
                    resolve();
                } else {
                    reject();
                }
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    checkTimeRelevance(time) {
        let date = new Date();
        date.setHours(time[0]);
        // time = [—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã]
        return new Promise((resolve, reject) => {
            if (date.getHours() > 23 || date.getHours() < 0) {
                reject(new Error(`‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!`));
            } else {
                resolve(time);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—ã
    checkTime(timeArray) {
        let [hours, minutes] = timeArray,
            { start, finish } = this.workingHours,
            { shipping, orderDate } = order.getOrderInfo,
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–∏—Ç 40 –º–∏–Ω
            estimatedTime = 2400000,
            makeErrorMsg = (time) => {
                return `‚õî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —É—Å–ø–µ–µ–º —Å–¥–µ–ª–∞—Ç—å –±—É–∫–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏. –° —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ${time} –º–∏–Ω—É—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É`
            };

        return new Promise((resolve, reject) => {
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–±–∞–≤–ª–µ–Ω–Ω—ã–º –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ
            // –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –±—É–∫–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            // –§–æ—Ä–º–∞—Ç: ms
            let usedTime = orderDate + (hours * 3600000) + (minutes * 60000),
                startWork = new Date(orderDate),
                finishWork = new Date(orderDate);

            // –ë—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
            if (shipping !== false) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∫ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Ç–∏–ø—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                shipping = true;

                // –¢—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è 90 –º–∏–Ω
                estimatedTime = 5400000;
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                // start = ms; finish = ms

                // –ï—Å–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, —Ç–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã,
                // —á—Ç–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç –Ω–∞ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
                if (this._isToday(orderDate) && new Date().getHours() > start) {
                    start = this._calculateTimeLimits(orderDate, Date.parse(new Date().toString()), estimatedTime);
                } else {
                    // StartWork - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —Ö—Ä–∞–Ω—è—â–∞—è –¥–∞—Ç—É –≤–º–µ—Å—Ç–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–æ–¥–∞, –º–µ—Å—è—Ü–∞ –∏ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞)
                    startWork.setHours(start);
                    startWork.setMinutes(0);
                    start = this._calculateTimeLimits(orderDate, Date.parse(startWork.toString()), estimatedTime);
                }
                finishWork.setHours(finish);
                finishWork.setMinutes(0);
                // –î–ª—è —Ñ–∏–Ω–∏—à–∞ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π) –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                finish = this._calculateTimeLimits(orderDate, Date.parse(finishWork.toString()), 0);

                // –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ª–∏–±–æ –≤—ã–¥–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ª–∏–±–æ –æ—à–∏–±–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—É—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                this._compareTime(usedTime, {start: start, finish: finish}, shipping).then(() => {
                    resolve(usedTime);
                }, () => {
                    reject(new Error(makeErrorMsg(90)));
                });

            // –ë—ã–ª –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑
            } else {
                if (this._isToday(orderDate) && new Date().getHours() > start) {
                    start = this._calculateTimeLimits(orderDate, Date.parse(new Date().toString()), estimatedTime);
                } else {
                    startWork.setHours(start);
                    startWork.setMinutes(0);
                    start = this._calculateTimeLimits(orderDate, Date.parse(startWork.toString()), estimatedTime);
                }
                finishWork.setHours(finish);
                finishWork.setMinutes(0);
                // –î–ª—è —Ñ–∏–Ω–∏—à–∞ (—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º) –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ - 10 –º–∏–Ω—É—Ç –æ—Ç –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–± –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ–ª –ø—Ä–∏–π—Ç–∏ –∑–∞ –±—É–∫–µ—Ç–æ–º
                finish = this._calculateTimeLimits(orderDate, Date.parse(finishWork.toString()), -600000);
                // –¢—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è 40 –º–∏–Ω
                this._compareTime(usedTime, {start: start, finish: finish}, shipping).then(() => {
                    resolve(usedTime);
                }, () => {
                    reject(new Error(makeErrorMsg(40)));
                });
            }
        });
    }

    validateTime(ctx, timeString = null) {
        let { orderDate } = order.getOrderInfo,
            timeArray;
        this.workingHours = this._getWorkingHours(orderDate);

        // if (this.today.getDate() === new Date(orderDate).getDate() && this.today.getMonth() === new Date(orderDate).getFullYear() && this.today.getMonth() === new Date(orderDate).getFullYear()) {
        //     console.log("‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: —Å–µ–≥–æ–¥–Ω—è ‚Ä¢");
        //     this.workingHours.start = new Date().getHours();
        // }
        // –ü–∞—Å–ø–æ–∑–Ω–∞–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–µ –∏ —Ä–∞—Å–∫–∏–¥–∞–µ–º –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        this.identifyTime(timeString)
            // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            .then((result) => {
                return this.checkTimeRelevance(result);
            })

            .then((result) => {
                return this.checkTime(result);
            })
            .then((result) => {
                let minutes = "" + new Date(result).getMinutes();
                this.time = result;
                if (minutes.length === 1) {
                    minutes = "0" + minutes;
                 }
                console.log(`–¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${this.time}`);
                ctx.reply(`‚úÖ –•–æ—Ä–æ—à–æ, –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ ${new Date(result).getHours()}:${minutes}`).then(() => {
                    ServiceOps.requestContinue(ctx, "–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è");
                });;
            }, (error) => {
                ctx.reply(error.message);
            })
            .catch((error) => {
                ctx.reply(error.message);
            });
    }
}

const validateTime = new Time();

timeValidation.enter((ctx) => {
    let { orderTime } = order.getOrderInfo;
    if (orderTime !== undefined) {
        validateTime.confirmTimeOverwrite(ctx, orderTime);
    } else {
        validateTime.requestTime(ctx);
    }
});

timeValidation.on('callback_query', (ctx) => {
    ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "");

    if (ctx.update['callback_query'].data === 'openMenu') {
        ctx.telegram.deleteMessage(ctx.update['callback_query'].message.chat.id, ctx.update['callback_query'].message['message_id']);
        ServiceOps.returnToMenu(ctx, order.displayInterface.bind(order), 'timeValidation');
        // ctx.scene.leave('timeValidation');

        // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å"
    } else if (ctx.update['callback_query'].data === 'overwriteData') {
        ServiceOps.processInputData(ctx.update['callback_query'].data, ctx, validateTime.requestTime.bind(validateTime));

        // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å"
    } else if (ctx.update['callback_query'].data === 'leaveData') {
        ServiceOps.processInputData(ctx.update['callback_query'].data, ctx, order.displayInterface.bind(order), 'timeValidation');

    } else {
        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        order.setOrderInfo = ['orderTime', validateTime.time];
        // let { orderTime } = order.getOrderInfo;
        ctx.telegram.deleteMessage(ctx.update['callback_query'].message.chat.id, ctx.update['callback_query'].message['message_id']);
        order.displayInterface(ctx);
        ctx.scene.leave('timeValidation');
    }
});

timeValidation.on('message', (ctx) => {

    if (ctx.update.message.text.match(/–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞/i)) {
        ServiceOps.returnToMenu(ctx, order.displayInterface.bind(order), 'timeValidation');

    } else if (ctx.update.message.text.match(/–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º/i)) {
        ServiceOps.displayPhoneNumber(ctx);

    } else if (ctx.update.message.text.match(/–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑/i)) {
        ctx.reply("–¢–∏–ø–∞ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑");
    } else {
        validateTime.validateTime(ctx, ctx.update.message.text);
    }
});

module.exports = validateTime;
module.exports = timeValidation;