const Telegraf = require('telegraf');
const { Markup, Extra } = Telegraf;
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const { leave } = Stage;
const order = require('../../../../core');
const ServiceOps = require('../../../service-ops');

const bouqtypeValidation = new Scene('bouqtypeValidation');

class BouqType {
    constructor() {
        this.availableTypes = [
            // name - –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ, data - –ø–æ –Ω–µ–π –¥–∞–ª–µ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è —Ü–µ–Ω–∞
            {
                emoji: "üë∞üèª",
                name: "–°–≤–∞–¥–µ–±–Ω—ã–π",
                data: "wedding"
            }, {
                emoji: "Ô∏èüíÅüèª‚Äç‚ôÄÔ∏è",
                name: "–î–ª—è –∂–µ–Ω—ã",
                data: "for wife"
            }, {
                emoji: "üï∫üèª",
                name: "–î–ª—è –ø–∞—Ü–∞–Ω–æ–≤",
                data: "fellas"
            }
        ];
        this.welcomeMsg = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∏–ø –±—É–∫–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`;
        this.chosenType = undefined;
    }

    // addNewBouqType() {
    //
    // }

    makeAvailableTypes() {
        let result = [];
        for (let i = 0; i < this.availableTypes.length; i++) {
            result.push([Markup.callbackButton(`${this.availableTypes[i].emoji} ${this.availableTypes[i].name}`, this.availableTypes[i].data)])
        }
        return result;
        // return array
    }

    requestBouqType(ctx) {
        let bouqTypeButtons = this.makeAvailableTypes();
        ctx.reply(this.welcomeMsg, Markup.inlineKeyboard(bouqTypeButtons).extra());
    }

    confirmDataRewrite(ctx, bouqType) {
        let typeName= this.translateBouqTypeName(bouqType);
        ctx.replyWithHTML(`–í—ã —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø –±—É–∫–µ—Ç–∞: <b>"${typeName}"</b>. \n–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç?`,
        Markup.inlineKeyboard([
            [Markup.callbackButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', 'overwriteData')],
            [Markup.callbackButton('–û—Å—Ç–∞–≤–∏—Ç—å', 'leaveData')]
        ]).extra());
    }

    setChosenCategory(ctx, chosenCategory) {
        this.chosenType = chosenCategory;
        let typeName = this.translateBouqTypeName(this.chosenType);
        ctx.replyWithHTML(`–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>${typeName}</b>`).then(() => {
            ServiceOps.requestContinue(ctx, "–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –±—É–∫–µ—Ç–∞");
        });
    }

    translateBouqTypeName(desiredType) {
        for (let prop of this.availableTypes) {
            for (let data in prop) {
                if (prop.data === desiredType) {
                    return prop.name;
                }
            }
        }
    }

}

const validateType = new BouqType();

bouqtypeValidation.enter((ctx) => {
    let { bouquetType } = order.getOrderInfo;
    if (bouquetType !== undefined) {
        validateType.confirmDataRewrite(ctx, bouquetType);
    } else {
        validateType.requestBouqType(ctx);
    }
});

bouqtypeValidation.on('callback_query', (ctx) => {
    if (ctx.update['callback_query'].data === 'overwriteData') {
        ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "");
        ServiceOps.processInputData(ctx.update['callback_query'].data, ctx, validateType.requestBouqType.bind(validateType));

    } else if (ctx.update['callback_query'].data === 'leaveData') {
        ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "");
        ServiceOps.processInputData(ctx.update['callback_query'].data, ctx, order.displayInterface.bind(order), 'bouqtypeValidation');

    } else if (ctx.update['callback_query'].data !== '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å') {
        ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "");
        console.log(ctx.update['callback_query']);
        validateType.setChosenCategory(ctx, ctx.update['callback_query'].data);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    } else {
        ctx.telegram.answerCbQuery(ctx.update['callback_query'].id, "");
        order.setOrderInfo = ['bouquetType', validateType.chosenType];
        ctx.telegram.deleteMessage(ctx.update['callback_query'].message.chat.id, ctx.update['callback_query'].message['message_id']);
        order.displayInterface(ctx);
        ctx.scene.leave('bouqtypeValidation');
    }
});

bouqtypeValidation.on('message', (ctx) => {
    if (ctx.update.message.text.match(/–º–µ–Ω—é –∑–∞–∫–∞–∑–∞/gi)) {
        ServiceOps.returnToMenu(ctx, order.displayInterface.bind(order), 'bouqtypeValidation');

    } else if (ctx.update.message.text.match(/—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º/gi)) {
        ServiceOps.displayPhoneNumber(ctx);

    } else if (ctx.update.message.text.match(/–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑/gi)) {
        ctx.reply("–û—Ç–º–µ–Ω—è—é –∑–∞–∫–∞–∑!(–Ω–µ—Ç)");
    } else {
        ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —è –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–∏–ø –±—É–∫–µ—Ç–∞, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ`,
            Markup.inlineKeyboard(validateType.makeAvailableTypes()).extra());
    }
});

module.exports = validateType;
module.exports = bouqtypeValidation;