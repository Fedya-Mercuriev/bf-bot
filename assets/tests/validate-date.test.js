'use strict';
const validateDay = require('../order/validate/validate-date/chunks/validate-day');
const validateLiteralMonth = require('../order/validate/validate-date/chunks/validate-literal-month');
const validateNumericMonth = require('../order/validate/validate-date/chunks/validate-numeric-month');
const identifyDate = require('../order/validate/validate-date/chunks/identify-date');

const dateStrings = ['22 —Ñ–µ–≤', '09 –æ–∫—Ç', '1.—Ñ–µ–≤—Ä', '17-–¥–µ–∫–∞–±—Ä—è', '05,–º–∞—è', '01/–Ω–æ—è–±', '12,–¥–µ–∫–∞', '30 –∏—é–Ω—è', '05.–∏—é–ª—å'];

const dateArray = [{
    string: '22 —è–Ω–≤',
    num: 0
}, {
    string: '22 –º–∞—Ä—Ç–∞',
    num: 2
}, {
    string: '22 –∏—é–ª—è',
    num: 6
}, {
    string: '22 –¥–µ–∫–∞–±',
    num: 11
}, {
    string: '22 –∏—é–ª—è',
    num: 6
}, {
    string: '22 —Ñ–µ–≤—Ä–∞–ª',
    num: 1
}, {
    string: '22 –∏—é–Ω',
    num: 5
}, {
    string: '22 –º–∞–π',
    num: 4
}, {
    string: '88 –º–∞–π',
    num: 4
}];

function getRandomInt(min, max) {
    const minVal = Math.ceil(min),
        maxVal = Math.floor(max);
    return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;
}

function generateDatesArray(dateSettings) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ["–¥–µ–Ω—å", "–º–µ—Å—è—Ü"]
    let result = [];
    let { minDay, maxDay, minMonth, maxMonth, datesQuantity } = dateSettings;

    for (let i = 0; i < datesQuantity; i++) {
        let date = [];

        if (minDay !== null && maxDay !== null) {
            date.push(getRandomInt(minDay, maxDay));
            date.push(getRandomInt(minMonth, maxMonth));
        } else {
            date.push(getRandomInt(minMonth, maxMonth));
        }
        result.push(date.toString());
    }
    return result;
}

function calculateDaysInMonth(month, year) {
    return new Date(year, month + 1, 0).getDate();
}

describe('Testing literal date input', () => {

    test.each(dateStrings)
        ('(Given string -> \'%s\') Identifies date if the string meets the requirements',
            (dateString) => {
                const expectedValue = dateString.match(/(\d{1,2})[\s\/.,\-]?([–∞-—è—ë]+)/i);
                expectedValue.splice(0, 1);
                return identifyDate(dateString).then(result => {
                    console.log(result);
                    expect(new Set(result)).toEqual(new Set(expectedValue));
                });
            });

    test.each(['222 —Ñ–µ–≤', '–æ–∫—Ç', '123 –º–∞—Ä—Ç–∞', '172 –æ–∫—Ç—è–±—Ä—è', '005 –º–∞—è', '0110 –º–∞—è', '122 –∞–ø—Ä–µ–ª—è', '300 –∏—é–Ω—è', '# –¥–µ–∫–∞–±—Ä—è'])
        ('Given string -> \'%s\';\nThrows an error if string doesn\'t meet the requirements (number{1,2}(symbol)string)',
            (dateString) => {
                return identifyDate(dateString).catch(err => {
                    expect(err.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                });
            });

    test.each(generateDatesArray(20, 1, 31, 1))
        ('Given string -> (\'%s\'); Throws an error if no string is provided after digits',
            (dateString) => {
                return identifyDate(dateString).catch(err => {
                    expect(err.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                });
            });

    test.each(['22—Ñ–µ–≤', '09–æ–∫—Ç', '1–º–∞—è', '72—è–Ω–≤–∞—Ä—è', '5–æ–∫—Ç—è–±—Ä—è', '0–º–∞—Ä—Ç', '12—è–Ω–≤', '30–∏—é–Ω—è', '05–∞–≤–≥—É—Å—Ç–∞'])
        ('Throws an error if no space or symbol between the two parts of an expected date is provided',
            (date) => {
                return identifyDate(date).catch(err => {
                    expect(err.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                });
            });

    test.each(['21 –Ω–æ—è–±—Ä—è –¥–∞', '—Ö–æ—á—É 1 –¥–µ–∫–∞–±—Ä—è –∏ —Ç–æ–ª—å–∫–æ', '#. 1 —è–Ω–≤–∞—Ä—è —É–≥—É', '—Ö–æ—á—É 21 –º–∞—Ä—Ç–∞ —Ö—ã', '—Ö–æ—á—É 8 –∞–ø—Ä–µ–ª—è', '–Ω–µ —Ö–æ—á—É 3 —Å–µ–Ω—Ç—è–±—Ä—è', '—Ö–æ—á—É –µ—â–µ –∏  12 –∏—é–ª—è'])
        ('(Given string -> (\'%s\')) Must identify date of traditional format (RU)', (date) => {
            let expectedResult = date.split(' ');
            expectedResult.splice(0, 1);
            return identifyDate(date).then(result => {
                console.log(result);
                expect(Array.isArray(result)).toBeTruthy();
            });
        });

    test.each([
            '18. njkcd',
            '01 sept',
            '17. xxx',
            '31. march',
            '29-abc',
            '22/ december',
            '8,  jul',
            '14. fgh'
        ])
        ('(Given string -> (\'%s\')) Throws an error If is provided with str containing latin letters',
            dateStr => {
                return identifyDate(dateStr).catch(e => {
                    expect(e.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                });
            })

    test.only.each([
            '18. Êó•Êúü',
            '01 üëøüë©‚Äçüé®üìç',
            '17. ÂëµÂëµ',
            '31. ÈîôËØØ',
            '29-üòÉüòÄüòé',
            '29/ üòÉüòÄüòé',
            '22/ Êó•Êúü',
            '22Ôºå Êó•Êúü',
            '8,  üëøüë©‚Äçüé®üìç',
            '14. Ê£ÄÊü•'
        ])
        ('(Given string -> (\'%s\')) Throws an error If is provided with other non-cyrillic characters',
            dateStr => {
                return identifyDate(dateStr).catch(e => {
                    expect(e.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                });
            })
});

describe('Testing numeric date input', () => {

    test.each(['05, 4', '29.6', '1/2', '15-11'])
        ('(Given string -> (\'%s\')) Throws an error if day or month have more than 2 numbers',
            (date) => {
                const dateVals = date.split(',');
                if (dateVals[0].length > 2 || dateVals[1].length > 2) {
                    return identifyDate(date).catch(err => {
                        expect(err.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                    });
                } else {
                    return identifyDate(date).then(result => {
                        const expectedVal = date.split(',');
                        expect(result).toEqual(expectedVal);
                    });
                }
            });

    test.each(generateDatesArray(20, 1, 99, 2))
        ('Given string -> (\'%s\') Throws an error if no space provided between digits',
            (date) => {
                const givenString = date.replace(',', '');

                return identifyDate(givenString).catch(err => {
                    expect(err.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                });
            });

    test.each(['21.01', '01.12', '02/02', '10,10', '1-1', '3 9', '12.12'])
        ('Given string -> (\'%s\') Must identify numeric date',
            (item) => {
                identifyDate(item).then(result => {
                    let desiredResult = item.split(/[\s\/.,:\\\-]/);
                    return expect(result).toEqual(desiredResult);
                });
            });
});

describe('Month validation', () => {

    describe('Testing literal date input', () => {

        test.each(['22 —Ç–∞–∫', '05 –ª—É—à–¥—Ü', '3 –±—Ä—é–º–µ—Ä–∞', '5 –∫–æ–º–∞—Ä–∞', '17 –∏—é–ø—è', '0 sept'])
            ('Given string -> (\'%s\') Throws an error If no month was found in string (literal)',
                (dateString) => {
                    return identifyDate(dateString).then(result => {
                        return validateLiteralMonth(result);
                    }).catch(err => {
                        expect(err.message).toMatch('‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!');
                    });
                });

        test.each([{
            string: '22 –º–∞—Ä—Ç',
            num: 2
        }, {
            string: '22 –º–∞—Ä—Ç–∞',
            num: 2
        }, {
            string: '22 –∏—é–ª—è',
            num: 6
        }, {
            string: '22 –¥–µ–∫–∞–±',
            num: 11
        }, {
            string: '22 –∏—é–ª—è',
            num: 6
        }, {
            string: '22 —Å–µ–Ω—Ç',
            num: 8
        }, {
            string: '22 –∏—é–Ω',
            num: 5
        }, {
            string: '22 –º–∞–π',
            num: 4
        }, {
            string: '1 —è–Ω–≤',
            num: 0
        }, {
            string: '88 –º–∞–π',
            num: 4
        }])('Given string -> (\'%o\') Return numeric js-month',
            (dateObj) => {
                const { string, num } = dateObj;

                return identifyDate(string).then(result => {
                    const expectedVal = num;
                    return validateLiteralMonth(result).then(validateMonthResult => {
                        expect(validateMonthResult[1]).toEqual(expectedVal);
                    });
                });
            });

        test('Month in the returned array is a number', () => {
            const dateArray = ['22 —è–Ω–≤', '22 –º–∞—Ä—Ç–∞', '22 –∏—é–ª—è', '22 –¥–µ–∫–∞–±', '22 –∏—é–ª—è', '22 —Ñ–µ–≤—Ä–∞–ª', '22 –∏—é–Ω', '22 –º–∞–π', '88 –º–∞–π'];

            dateArray.forEach(dateString => {
                return identifyDate(dateString).then(result => {
                    return validateLiteralMonth(result).then(validateMonthResult => {
                        expect(validateMonthResult[1]).toBeInstanceOf(Number);
                    });
                });
            });
        });

        test('Throws error If input month is less than current month', () => {
            const datesArray = ['12 —Ñ–µ–≤—Ä–∞–ª—è', '3 —è–Ω–≤–∞—Ä—è', '1 —Ñ–µ–≤', '2 —è–Ω–≤', '2 —è–Ω–≤', '15 —Ñ–µ–≤'];

            datesArray.forEach(dateString => {
                return identifyDate(dateString).then(dateArr => {
                    expect(validateLiteralMonth(dateArr)).rejects.toEqual('‚õî –£–≤—ã, –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –±—É–∫–µ—Ç –Ω–∞ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞!')
                });
            });
        });
    });

    describe('Testing numeric month validation', () => {

        test.each([{
                string: '22.04',
                num: 3
            }, {
                string: '06.11',
                num: 10
            }, {
                string: '06.04',
                num: 3
            }])
            ('(Given date object -> %o) Returns numeric js-month',
                (dateObj) => {
                    const dateArr = dateObj.string.split('.');

                    return validateNumericMonth(dateArr)
                        .then(validateMonthResult => {
                            expect(validateMonthResult[1]).toEqual(dateObj.num);
                        });

                }
            );

        test.each([
            '12, 01',
            '3, 02',
            '1, 2',
            '2, 01',
            '2, 1',
            '15, 02'
        ])(
            '(Given array -> \'[%s]\') Throws error If input month is less than current month',
            (dateArr) => {
                return validateNumericMonth(dateArr)
                    .catch(err => {
                        expect(err.message).toMatch('‚õî –£–≤—ã, –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –±—É–∫–µ—Ç –Ω–∞ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞!');
                    });
            }
        );

        test.each([
                '21,04',
                '01, 12',
                '02, 03',
                '10, 10',
                '1, 8',
                '3, 9',
                '12, 12'
            ])
            ('(Given arguments -> [%s]) ‚Äì month in the returned array must be a number',
                (dateString) => {
                    const dateArray = dateString.split(',');
                    return validateNumericMonth(dateArray)
                        .then(arrWithValidatedMonth => {
                            expect(typeof arrWithValidatedMonth[1] === 'number').toBeTruthy();
                        });
                }
            );

        test.each([
                '21, 04',
                '01,0',
                '02,0',
                '10,0',
                '1,0',
                '3,0',
                '12,0'
            ])
            ('(Given string -> \'%s\') Throws an error if month value is 0',
                async(dateStr) => {
                    const dateArr = await identifyDate(dateStr);
                    if (+dateArr[1] !== 0) {
                        return validateNumericMonth(dateArr)
                            .then(result => {
                                expect(result).toEqual(dateArr);
                            })
                    } else {
                        return validateNumericMonth(dateArr)
                            .catch(e => {
                                expect(e.message).toMatch('‚õîÔ∏è –ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!');
                            })
                    }
                })
    });
});

describe('Testing day validation', () => {

    test.each([
            '21, 2',
            '1, 2',
            '15, 2',
            '24, 2',
            '5, 2',
            '8, 2',
            '14, 2',
        ])
        ('(Given date -> %s) Throws an error if input month = current, but day is < current day',
            (dateStr) => {
                let dateArray = dateStr.split(',');
                dateArray[1] = +dateArray[1];

                validateDay(dateArray).catch(e => {
                    expect(e.message).toMatch('‚õîÔ∏è –î–∞—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞');
                })

            });

    test.each([
            '21, 3',
            '1, 10',
            '15, 4',
            '24, 7',
            '5, 11',
            '8, 8',
            '14, 5',
        ])
        ('(Given string -> \'%s\') Day value in the resolved arr is a number',
            (dateStr) => {
                let dateArray = dateStr.split(',');
                dateArray[1] = +dateArray[1];

                validateDay(dateArray).then(result => {
                    expect(typeof result[0] === 'number').toBeTruthy();
                })
            })

    test.each(generateDatesArray({ datesQuantity: 20, minDay: 30, maxDay: 32, minMonth: 3, maxMonth: 11 }))
        ('(Given string -> \'%s\') Throws an error if day value exceeds max value in given month; otherwise resolves date array',
            (dateString) => {
                return identifyDate(dateString)
                    .then(dateArr => {
                        return validateNumericMonth(dateArr);
                    })
                    .then(arrWithValidatedMonth => {
                        if (arrWithValidatedMonth[0] > calculateDaysInMonth(arrWithValidatedMonth[1], new Date().getFullYear())) {
                            expect(validateDay(arrWithValidatedMonth)).rejects.toMatch('‚õîÔ∏è –í –º–µ—Å—è—Ü–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏, –Ω–µ—Ç —á–∏—Å–ª–∞');
                        } else {
                            expect(validateDay(arrWithValidatedMonth)).resolves.toEqual(arrWithValidatedMonth);
                        }
                    })
            });
});